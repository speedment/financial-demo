package com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.Cohort;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.PositionIdentifier;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.LongIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table financialdemo.db0.piq.trader.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedTrader extends Entity<Trader> {
    
    /**
     * This Field corresponds to the {@link Trader} field that can be obtained
     * using the {@link Trader#getId()} method.
     */
    final ComparableField<Trader, Long, Long> ID = new ComparableFieldImpl<>(Identifier.ID, Trader::getId, Trader::setId, new LongIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Trader} field that can be obtained
     * using the {@link Trader#getCohortId()} method.
     */
    final ComparableForeignKeyField<Trader, Long, Long, Cohort> COHORT_ID = new ComparableForeignKeyFieldImpl<>(Identifier.COHORT_ID, Trader::getCohortId, Trader::setCohortId, Trader::findCohortId, new LongIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Trader} field that can be obtained
     * using the {@link Trader#getName()} method.
     */
    final StringField<Trader, String> NAME = new StringFieldImpl<>(Identifier.NAME, Trader::getName, Trader::setName, new StringIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Cohort} referenced by the
     * field that can be obtained using {@link Trader#getCohortId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Trader entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Cohort} referenced by the field that
     * can be obtained using {@link Trader#getCohortId()}
     */
    Cohort findCohortId();
    
    /**
     * Returns the id of this Trader. The id field corresponds to the database
     * column db0.piq.trader.id.
     * 
     * @return the id of this Trader
     */
    Long getId();
    
    /**
     * Returns the cohortId of this Trader. The cohortId field corresponds to the
     * database column db0.piq.trader.cohort_id.
     * 
     * @return the cohortId of this Trader
     */
    Long getCohortId();
    
    /**
     * Returns the name of this Trader. The name field corresponds to the
     * database column db0.piq.trader.name.
     * 
     * @return the name of this Trader
     */
    String getName();
    
    /**
     * Sets the id of this Trader. The id field corresponds to the database
     * column db0.piq.trader.id.
     * 
     * @param id to set of this Trader
     * @return this Trader instance
     */
    Trader setId(Long id);
    
    /**
     * Sets the cohortId of this Trader. The cohortId field corresponds to the
     * database column db0.piq.trader.cohort_id.
     * 
     * @param cohortId to set of this Trader
     * @return this Trader instance
     */
    Trader setCohortId(Long cohortId);
    
    /**
     * Sets the name of this Trader. The name field corresponds to the database
     * column db0.piq.trader.name.
     * 
     * @param name to set of this Trader
     * @return this Trader instance
     */
    Trader setName(String name);
    
    /**
     * Creates and returns a {@link Stream} of all {@link PositionIdentifier}
     * Entities that references this Entity by the foreign key field that can be
     * obtained using {@link PositionIdentifier#getTraderId()}. The order of the
     * Entities are undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link PositionIdentifier} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link PositionIdentifier#getTraderId()}
     */
    Stream<PositionIdentifier> findPositionIdentifiersByTraderId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * PositionIdentifier} Entities that references this Entity by a foreign key.
     * The order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link
     * PositionIdentifier} Entities that references this Entity by a foreign key
     */
    Stream<PositionIdentifier> findPositionIdentifiers();
    
    enum Identifier implements FieldIdentifier<Trader> {
        
        ID ("id"),
        COHORT_ID ("cohort_id"),
        NAME ("name");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "piq";
        }
        
        @Override
        public String tableName() {
            return "trader";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}