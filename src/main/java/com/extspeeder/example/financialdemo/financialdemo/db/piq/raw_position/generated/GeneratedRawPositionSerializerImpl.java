package com.extspeeder.example.financialdemo.financialdemo.db.piq.raw_position.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.raw_position.RawPosition;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named daily_position_performance.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedRawPositionSerializerImpl extends AbstractEntitySerializer<RawPosition> {
    
    protected final static long serialVersionUID = 124388340;
    private final static Serializer<Long> ID_SERIALIZER = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<Double> PNL_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    private final static Serializer<Long> PID_SERIALIZER = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<Double> INITIATE_TRADING_MKT_VAL_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    private final static Serializer<Double> LIQUIDATE_TRADING_MKT_VAL_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    private final static Serializer<Integer> VALUE_DATE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Long> TRADER_ID = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<String> TRADER_NAME = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> TRADER_GROUP = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> TRADER_GROUP_TYPE = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Long> INSTRUMENT_ID = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<String> INSTRUMENT_NAME = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> INSTRUMENT_SYMBOL = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> INSTRUMENT_SECTOR = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> INSTRUMENT_INDUSTRY = SerializerFactory.serializerOf(String.class);
    
    public GeneratedRawPositionSerializerImpl(Manager<RawPosition> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final RawPosition rawPosition) throws IOException {
        final long[] bits = new long[1];
        if (!rawPosition.getInstrumentName().isPresent()) BitSetUtil.set(bits, 0);
        if (!rawPosition.getInstrumentSector().isPresent()) BitSetUtil.set(bits, 1);
        if (!rawPosition.getInstrumentIndustry().isPresent()) BitSetUtil.set(bits, 2);
        out.writeLong(bits[0]);
        out.writeLong(rawPosition.getId());
        out.writeDouble(rawPosition.getPnl());
        out.writeDouble(rawPosition.getInitiateTradingMktVal());
        out.writeDouble(rawPosition.getLiquidateTradingMktVal());
        out.writeInt(rawPosition.getValueDate());
        out.writeUTF(rawPosition.getTraderName());
        out.writeUTF(rawPosition.getTraderGroup());
        out.writeUTF(rawPosition.getTraderGroupType());
        if (rawPosition.getInstrumentName().isPresent()) out.writeUTF(rawPosition.getInstrumentName().get());
        out.writeUTF(rawPosition.getInstrumentSymbol());
        if (rawPosition.getInstrumentSector().isPresent()) out.writeUTF(rawPosition.getInstrumentSector().get());
        if (rawPosition.getInstrumentIndustry().isPresent()) out.writeUTF(rawPosition.getInstrumentIndustry().get());
    }
    
    @Override
    public RawPosition deserialize(final DataInput in, final int available) throws IOException {
        final RawPosition rawPosition = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        rawPosition.setId(in.readLong());
        rawPosition.setPnl(in.readDouble());
        rawPosition.setInitiateTradingMktVal(in.readDouble());
        rawPosition.setLiquidateTradingMktVal(in.readDouble());
        rawPosition.setValueDate(in.readInt());
        rawPosition.setTraderName(in.readUTF());
        rawPosition.setTraderGroup(in.readUTF());
        rawPosition.setTraderGroupType(in.readUTF());
        if (!BitSetUtil.get0(bits)) rawPosition.setInstrumentName(in.readUTF());
        rawPosition.setInstrumentSymbol(in.readUTF());
        if (!BitSetUtil.get1(bits)) rawPosition.setInstrumentSector(in.readUTF());
        if (!BitSetUtil.get2(bits)) rawPosition.setInstrumentIndustry(in.readUTF());
        return rawPosition;
    }
}