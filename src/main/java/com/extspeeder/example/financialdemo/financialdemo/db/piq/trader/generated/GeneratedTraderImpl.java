package com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.Cohort;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.PositionIdentifier;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table financialdemo.db0.piq.trader.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedTraderImpl extends AbstractBaseEntity<Trader> implements Trader {
    
    private Long id;
    private Long cohortId;
    private String name;
    
    protected GeneratedTraderImpl() {
        
    }
    
    @Override
    public Cohort findCohortId() {
        return managerOf_(Cohort.class).findAny(Cohort.ID, getCohortId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Cohort is set to " + getCohortId()
                ));
            
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public Long getCohortId() {
        return cohortId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public final Trader setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final Trader setCohortId(Long cohortId) {
        this.cohortId = cohortId;
        return this;
    }
    
    @Override
    public final Trader setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Stream<PositionIdentifier> findPositionIdentifiersByTraderId() {
        return managerOf_(PositionIdentifier.class)
                .stream().filter(PositionIdentifier.TRADER_ID.equal(this.getId()));
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("cohortId = "+Objects.toString(getCohortId()));
        sj.add("name = "+Objects.toString(getName()));
        return "TraderImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Trader)) { return false; }
        final Trader thatTrader = (Trader)that;
        if (!Objects.equals(this.getId(), thatTrader.getId())) {return false; }
        if (!Objects.equals(this.getCohortId(), thatTrader.getCohortId())) {return false; }
        if (!Objects.equals(this.getName(), thatTrader.getName())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getCohortId());
        hash = 31 * hash + Objects.hashCode(getName());
        return hash;
    }
    
    @Override
    public Class<Trader> entityClass() {
        return Trader.class;
    }
    
    @Override
    public Stream<PositionIdentifier> findPositionIdentifiers() {
        return findPositionIdentifiersByTraderId();
    }
}