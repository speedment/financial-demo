package com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.Instrument;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.PositionIdentifier;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.raw_position.RawPosition;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.LongIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table financialdemo.db0.piq.position_identifier.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedPositionIdentifier extends Entity<PositionIdentifier> {
    
    /**
     * This Field corresponds to the {@link PositionIdentifier} field that can be
     * obtained using the {@link PositionIdentifier#getId()} method.
     */
    final ComparableField<PositionIdentifier, Long, Long> ID = new ComparableFieldImpl<>(Identifier.ID, PositionIdentifier::getId, PositionIdentifier::setId, new LongIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link PositionIdentifier} field that can be
     * obtained using the {@link PositionIdentifier#getInstrumentId()} method.
     */
    final ComparableForeignKeyField<PositionIdentifier, Long, Long, Instrument> INSTRUMENT_ID = new ComparableForeignKeyFieldImpl<>(Identifier.INSTRUMENT_ID, PositionIdentifier::getInstrumentId, PositionIdentifier::setInstrumentId, PositionIdentifier::findInstrumentId, new LongIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link PositionIdentifier} field that can be
     * obtained using the {@link PositionIdentifier#getTraderId()} method.
     */
    final ComparableForeignKeyField<PositionIdentifier, Long, Long, Trader> TRADER_ID = new ComparableForeignKeyFieldImpl<>(Identifier.TRADER_ID, PositionIdentifier::getTraderId, PositionIdentifier::setTraderId, PositionIdentifier::findTraderId, new LongIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Trader} referenced by the
     * field that can be obtained using {@link PositionIdentifier#getTraderId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N PositionIdentifier
     * entities and call this method for each one, there will be N SQL-queries
     * executed.
     * 
     * @return the foreign key Entity {@link Trader} referenced by the field that
     * can be obtained using {@link PositionIdentifier#getTraderId()}
     */
    Trader findTraderId();
    
    /**
     * Finds and returns the foreign key Entity {@link Instrument} referenced by
     * the field that can be obtained using {@link
     * PositionIdentifier#getInstrumentId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N PositionIdentifier
     * entities and call this method for each one, there will be N SQL-queries
     * executed.
     * 
     * @return the foreign key Entity {@link Instrument} referenced by the field
     * that can be obtained using {@link PositionIdentifier#getInstrumentId()}
     */
    Instrument findInstrumentId();
    
    /**
     * Returns the id of this PositionIdentifier. The id field corresponds to the
     * database column db0.piq.position_identifier.id.
     * 
     * @return the id of this PositionIdentifier
     */
    Long getId();
    
    /**
     * Returns the instrumentId of this PositionIdentifier. The instrumentId
     * field corresponds to the database column
     * db0.piq.position_identifier.instrument_id.
     * 
     * @return the instrumentId of this PositionIdentifier
     */
    Long getInstrumentId();
    
    /**
     * Returns the traderId of this PositionIdentifier. The traderId field
     * corresponds to the database column db0.piq.position_identifier.trader_id.
     * 
     * @return the traderId of this PositionIdentifier
     */
    Long getTraderId();
    
    /**
     * Sets the id of this PositionIdentifier. The id field corresponds to the
     * database column db0.piq.position_identifier.id.
     * 
     * @param id to set of this PositionIdentifier
     * @return this PositionIdentifier instance
     */
    PositionIdentifier setId(Long id);
    
    /**
     * Sets the instrumentId of this PositionIdentifier. The instrumentId field
     * corresponds to the database column
     * db0.piq.position_identifier.instrument_id.
     * 
     * @param instrumentId to set of this PositionIdentifier
     * @return this PositionIdentifier instance
     */
    PositionIdentifier setInstrumentId(Long instrumentId);
    
    /**
     * Sets the traderId of this PositionIdentifier. The traderId field
     * corresponds to the database column db0.piq.position_identifier.trader_id.
     * 
     * @param traderId to set of this PositionIdentifier
     * @return this PositionIdentifier instance
     */
    PositionIdentifier setTraderId(Long traderId);
    
    /**
     * Creates and returns a {@link Stream} of all {@link RawPosition} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link RawPosition#getPid()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link RawPosition} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link RawPosition#getPid()}
     */
    Stream<RawPosition> findRawPositionsByPid();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * RawPosition} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link RawPosition}
     * Entities that references this Entity by a foreign key
     */
    Stream<RawPosition> findRawPositions();
    
    enum Identifier implements FieldIdentifier<PositionIdentifier> {
        
        ID ("id"),
        INSTRUMENT_ID ("instrument_id"),
        TRADER_ID ("trader_id");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "piq";
        }
        
        @Override
        public String tableName() {
            return "position_identifier";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}