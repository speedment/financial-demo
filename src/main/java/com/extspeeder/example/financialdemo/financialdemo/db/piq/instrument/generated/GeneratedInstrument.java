package com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.Instrument;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.PositionIdentifier;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.LongIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table financialdemo.db0.piq.instrument.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedInstrument extends Entity<Instrument> {
    
    /**
     * This Field corresponds to the {@link Instrument} field that can be
     * obtained using the {@link Instrument#getId()} method.
     */
    final ComparableField<Instrument, Long, Long> ID = new ComparableFieldImpl<>(Identifier.ID, Instrument::getId, Instrument::setId, new LongIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Instrument} field that can be
     * obtained using the {@link Instrument#getIndustry()} method.
     */
    final StringField<Instrument, String> INDUSTRY = new StringFieldImpl<>(Identifier.INDUSTRY, o -> o.getIndustry().orElse(null), Instrument::setIndustry, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Instrument} field that can be
     * obtained using the {@link Instrument#getName()} method.
     */
    final StringField<Instrument, String> NAME = new StringFieldImpl<>(Identifier.NAME, o -> o.getName().orElse(null), Instrument::setName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Instrument} field that can be
     * obtained using the {@link Instrument#getSector()} method.
     */
    final StringField<Instrument, String> SECTOR = new StringFieldImpl<>(Identifier.SECTOR, o -> o.getSector().orElse(null), Instrument::setSector, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Instrument} field that can be
     * obtained using the {@link Instrument#getSymbol()} method.
     */
    final StringField<Instrument, String> SYMBOL = new StringFieldImpl<>(Identifier.SYMBOL, Instrument::getSymbol, Instrument::setSymbol, new StringIdentityMapper(), false);
    
    /**
     * Returns the id of this Instrument. The id field corresponds to the
     * database column db0.piq.instrument.id.
     * 
     * @return the id of this Instrument
     */
    Long getId();
    
    /**
     * Returns the industry of this Instrument. The industry field corresponds to
     * the database column db0.piq.instrument.industry.
     * 
     * @return the industry of this Instrument
     */
    Optional<String> getIndustry();
    
    /**
     * Returns the name of this Instrument. The name field corresponds to the
     * database column db0.piq.instrument.name.
     * 
     * @return the name of this Instrument
     */
    Optional<String> getName();
    
    /**
     * Returns the sector of this Instrument. The sector field corresponds to the
     * database column db0.piq.instrument.sector.
     * 
     * @return the sector of this Instrument
     */
    Optional<String> getSector();
    
    /**
     * Returns the symbol of this Instrument. The symbol field corresponds to the
     * database column db0.piq.instrument.symbol.
     * 
     * @return the symbol of this Instrument
     */
    String getSymbol();
    
    /**
     * Sets the id of this Instrument. The id field corresponds to the database
     * column db0.piq.instrument.id.
     * 
     * @param id to set of this Instrument
     * @return this Instrument instance
     */
    Instrument setId(Long id);
    
    /**
     * Sets the industry of this Instrument. The industry field corresponds to
     * the database column db0.piq.instrument.industry.
     * 
     * @param industry to set of this Instrument
     * @return this Instrument instance
     */
    Instrument setIndustry(String industry);
    
    /**
     * Sets the name of this Instrument. The name field corresponds to the
     * database column db0.piq.instrument.name.
     * 
     * @param name to set of this Instrument
     * @return this Instrument instance
     */
    Instrument setName(String name);
    
    /**
     * Sets the sector of this Instrument. The sector field corresponds to the
     * database column db0.piq.instrument.sector.
     * 
     * @param sector to set of this Instrument
     * @return this Instrument instance
     */
    Instrument setSector(String sector);
    
    /**
     * Sets the symbol of this Instrument. The symbol field corresponds to the
     * database column db0.piq.instrument.symbol.
     * 
     * @param symbol to set of this Instrument
     * @return this Instrument instance
     */
    Instrument setSymbol(String symbol);
    
    /**
     * Creates and returns a {@link Stream} of all {@link PositionIdentifier}
     * Entities that references this Entity by the foreign key field that can be
     * obtained using {@link PositionIdentifier#getInstrumentId()}. The order of
     * the Entities are undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link PositionIdentifier} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link PositionIdentifier#getInstrumentId()}
     */
    Stream<PositionIdentifier> findPositionIdentifiersByInstrumentId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * PositionIdentifier} Entities that references this Entity by a foreign key.
     * The order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link
     * PositionIdentifier} Entities that references this Entity by a foreign key
     */
    Stream<PositionIdentifier> findPositionIdentifiers();
    
    enum Identifier implements FieldIdentifier<Instrument> {
        
        ID ("id"),
        INDUSTRY ("industry"),
        NAME ("name"),
        SECTOR ("sector"),
        SYMBOL ("symbol");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "piq";
        }
        
        @Override
        public String tableName() {
            return "instrument";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}