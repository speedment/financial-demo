package com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.Cohort;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named cohort.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedCohortSerializerImpl extends AbstractEntitySerializer<Cohort> {
    
    protected final static long serialVersionUID = 165427766;
    private final static Serializer<Long> ID_SERIALIZER = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<String> NAME_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> END_DATE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> START_DATE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> COHORT_TYPE_SERIALIZER = SerializerFactory.serializerOf(String.class);
    
    public GeneratedCohortSerializerImpl(Manager<Cohort> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Cohort cohort) throws IOException {
        final long[] bits = new long[1];
        if (!cohort.getEndDate().isPresent()) BitSetUtil.set(bits, 0);
        if (!cohort.getStartDate().isPresent()) BitSetUtil.set(bits, 1);
        out.writeLong(bits[0]);
        out.writeLong(cohort.getId());
        out.writeUTF(cohort.getName());
        if (cohort.getEndDate().isPresent()) out.writeInt(cohort.getEndDate().get());
        if (cohort.getStartDate().isPresent()) out.writeInt(cohort.getStartDate().get());
        out.writeUTF(cohort.getCohortType());
    }
    
    @Override
    public Cohort deserialize(final DataInput in, final int available) throws IOException {
        final Cohort cohort = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        cohort.setId(in.readLong());
        cohort.setName(in.readUTF());
        if (!BitSetUtil.get0(bits)) cohort.setEndDate(in.readInt());
        if (!BitSetUtil.get1(bits)) cohort.setStartDate(in.readInt());
        cohort.setCohortType(in.readUTF());
        return cohort;
    }
}