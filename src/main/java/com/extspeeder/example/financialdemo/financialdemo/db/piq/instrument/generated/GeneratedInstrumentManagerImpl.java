package com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.Instrument;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.InstrumentImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.plugin.extspeeder.runtime.manager.AbstractExtSpeederSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table financialdemo.db0.piq.instrument.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedInstrumentManagerImpl extends AbstractExtSpeederSqlManager<Instrument> implements GeneratedInstrumentManager {
    
    private final static Tuple1<Class<Long>> PRIMARY_KEY_CLASSES = Tuples.of(Long.class);
    
    protected GeneratedInstrumentManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Instrument newEntityFrom(ResultSet resultSet) throws SQLException, SpeedmentException {
        final Instrument entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getLong(1));
            entity.setIndustry(resultSet.getString(2));
            entity.setName(resultSet.getString(3));
            entity.setSector(resultSet.getString(4));
            entity.setSymbol(resultSet.getString(5));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Instrument newEmptyEntity() {
        return new InstrumentImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Instrument entity, FieldIdentifier<Instrument> identifier) {
        switch ((Instrument.Identifier) identifier) {
            case ID : return entity.getId();
            case INDUSTRY : return entity.getIndustry().orElse(null);
            case NAME : return entity.getName().orElse(null);
            case SECTOR : return entity.getSector().orElse(null);
            case SYMBOL : return entity.getSymbol();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Instrument entity, FieldIdentifier<Instrument> identifier, Object value) {
        switch ((Instrument.Identifier) identifier) {
            case ID : entity.setId((Long) value); break;
            case INDUSTRY : entity.setIndustry((String) value); break;
            case NAME : entity.setName((String) value); break;
            case SECTOR : entity.setSector((String) value); break;
            case SYMBOL : entity.setSymbol((String) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Instrument.ID,
            Instrument.INDUSTRY,
            Instrument.NAME,
            Instrument.SECTOR,
            Instrument.SYMBOL
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Instrument.ID
        );
    }
    
    @Override
    public Tuple1<Class<Long>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public Instrument newCopyOf(Instrument source) {
        final Instrument copy = new InstrumentImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setId(source.getId());
        source.getIndustry().ifPresent(copy::setIndustry);
        source.getName().ifPresent(copy::setName);
        source.getSector().ifPresent(copy::setSector);
        copy.setSymbol(source.getSymbol());
        
        return copy;
    }
}