package com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.Instrument;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.PositionIdentifier;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table financialdemo.db0.piq.instrument.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedInstrumentImpl extends AbstractBaseEntity<Instrument> implements Instrument {
    
    private Long id;
    private String industry;
    private String name;
    private String sector;
    private String symbol;
    
    protected GeneratedInstrumentImpl() {
        
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public Optional<String> getIndustry() {
        return Optional.ofNullable(industry);
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public Optional<String> getSector() {
        return Optional.ofNullable(sector);
    }
    
    @Override
    public String getSymbol() {
        return symbol;
    }
    
    @Override
    public final Instrument setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final Instrument setIndustry(String industry) {
        this.industry = industry;
        return this;
    }
    
    @Override
    public final Instrument setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final Instrument setSector(String sector) {
        this.sector = sector;
        return this;
    }
    
    @Override
    public final Instrument setSymbol(String symbol) {
        this.symbol = symbol;
        return this;
    }
    
    @Override
    public Stream<PositionIdentifier> findPositionIdentifiersByInstrumentId() {
        return managerOf_(PositionIdentifier.class)
                .stream().filter(PositionIdentifier.INSTRUMENT_ID.equal(this.getId()));
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("industry = "+Objects.toString(getIndustry().orElse(null)));
        sj.add("name = "+Objects.toString(getName().orElse(null)));
        sj.add("sector = "+Objects.toString(getSector().orElse(null)));
        sj.add("symbol = "+Objects.toString(getSymbol()));
        return "InstrumentImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Instrument)) { return false; }
        final Instrument thatInstrument = (Instrument)that;
        if (!Objects.equals(this.getId(), thatInstrument.getId())) {return false; }
        if (!Objects.equals(this.getIndustry(), thatInstrument.getIndustry())) {return false; }
        if (!Objects.equals(this.getName(), thatInstrument.getName())) {return false; }
        if (!Objects.equals(this.getSector(), thatInstrument.getSector())) {return false; }
        if (!Objects.equals(this.getSymbol(), thatInstrument.getSymbol())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getIndustry());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getSector());
        hash = 31 * hash + Objects.hashCode(getSymbol());
        return hash;
    }
    
    @Override
    public Class<Instrument> entityClass() {
        return Instrument.class;
    }
    
    @Override
    public Stream<PositionIdentifier> findPositionIdentifiers() {
        return findPositionIdentifiersByInstrumentId();
    }
}