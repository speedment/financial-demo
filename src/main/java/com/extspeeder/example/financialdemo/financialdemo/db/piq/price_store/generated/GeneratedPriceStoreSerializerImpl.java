package com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.PriceStore;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named price_store.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedPriceStoreSerializerImpl extends AbstractEntitySerializer<PriceStore> {
    
    protected final static long serialVersionUID = 723595929;
    private final static Serializer<Long> ID_SERIALIZER = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<Long> VALUE_DATE_SERIALIZER = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<Double> OPEN_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    private final static Serializer<Double> HIGH_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    private final static Serializer<Double> LOW_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    private final static Serializer<Double> CLOSE_SERIALIZER = SerializerFactory.serializerOf(Double.class);
    
    public GeneratedPriceStoreSerializerImpl(Manager<PriceStore> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final PriceStore priceStore) throws IOException {
        final long[] bits = new long[1];
        if (!priceStore.getClose().isPresent()) BitSetUtil.set(bits, 0);
        out.writeLong(bits[0]);
        out.writeLong(priceStore.getId());
        out.writeLong(priceStore.getValueDate());
        out.writeDouble(priceStore.getOpen());
        out.writeDouble(priceStore.getHigh());
        out.writeDouble(priceStore.getLow());
        if (priceStore.getClose().isPresent()) out.writeDouble(priceStore.getClose().get());
    }
    
    @Override
    public PriceStore deserialize(final DataInput in, final int available) throws IOException {
        final PriceStore priceStore = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        priceStore.setId(in.readLong());
        priceStore.setValueDate(in.readLong());
        priceStore.setOpen(in.readDouble());
        priceStore.setHigh(in.readDouble());
        priceStore.setLow(in.readDouble());
        if (!BitSetUtil.get0(bits)) priceStore.setClose(in.readDouble());
        return priceStore;
    }
}