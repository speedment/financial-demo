package com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.TraderImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.plugin.extspeeder.runtime.manager.AbstractExtSpeederSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table financialdemo.db0.piq.trader.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedTraderManagerImpl extends AbstractExtSpeederSqlManager<Trader> implements GeneratedTraderManager {
    
    private final static Tuple1<Class<Long>> PRIMARY_KEY_CLASSES = Tuples.of(Long.class);
    
    protected GeneratedTraderManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Trader newEntityFrom(ResultSet resultSet) throws SQLException, SpeedmentException {
        final Trader entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getLong(1));
            entity.setCohortId(resultSet.getLong(2));
            entity.setName(resultSet.getString(3));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Trader newEmptyEntity() {
        return new TraderImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Trader entity, FieldIdentifier<Trader> identifier) {
        switch ((Trader.Identifier) identifier) {
            case ID : return entity.getId();
            case COHORT_ID : return entity.getCohortId();
            case NAME : return entity.getName();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Trader entity, FieldIdentifier<Trader> identifier, Object value) {
        switch ((Trader.Identifier) identifier) {
            case ID : entity.setId((Long) value); break;
            case COHORT_ID : entity.setCohortId((Long) value); break;
            case NAME : entity.setName((String) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Trader.ID,
            Trader.COHORT_ID,
            Trader.NAME
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Trader.ID
        );
    }
    
    @Override
    public Tuple1<Class<Long>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public Trader newCopyOf(Trader source) {
        final Trader copy = new TraderImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setId(source.getId());
        copy.setCohortId(source.getCohortId());
        copy.setName(source.getName());
        
        return copy;
    }
}