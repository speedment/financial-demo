package com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.PriceStore;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table financialdemo.db0.piq.price_store.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedPriceStoreImpl extends AbstractBaseEntity<PriceStore> implements PriceStore {
    
    private Long id;
    private Long valueDate;
    private Double open;
    private Double high;
    private Double low;
    private Double close;
    
    protected GeneratedPriceStoreImpl() {
        
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public Long getValueDate() {
        return valueDate;
    }
    
    @Override
    public Double getOpen() {
        return open;
    }
    
    @Override
    public Double getHigh() {
        return high;
    }
    
    @Override
    public Double getLow() {
        return low;
    }
    
    @Override
    public Optional<Double> getClose() {
        return Optional.ofNullable(close);
    }
    
    @Override
    public final PriceStore setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final PriceStore setValueDate(Long valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    @Override
    public final PriceStore setOpen(Double open) {
        this.open = open;
        return this;
    }
    
    @Override
    public final PriceStore setHigh(Double high) {
        this.high = high;
        return this;
    }
    
    @Override
    public final PriceStore setLow(Double low) {
        this.low = low;
        return this;
    }
    
    @Override
    public final PriceStore setClose(Double close) {
        this.close = close;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("valueDate = "+Objects.toString(getValueDate()));
        sj.add("open = "+Objects.toString(getOpen()));
        sj.add("high = "+Objects.toString(getHigh()));
        sj.add("low = "+Objects.toString(getLow()));
        sj.add("close = "+Objects.toString(getClose().orElse(null)));
        return "PriceStoreImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof PriceStore)) { return false; }
        final PriceStore thatPriceStore = (PriceStore)that;
        if (!Objects.equals(this.getId(), thatPriceStore.getId())) {return false; }
        if (!Objects.equals(this.getValueDate(), thatPriceStore.getValueDate())) {return false; }
        if (!Objects.equals(this.getOpen(), thatPriceStore.getOpen())) {return false; }
        if (!Objects.equals(this.getHigh(), thatPriceStore.getHigh())) {return false; }
        if (!Objects.equals(this.getLow(), thatPriceStore.getLow())) {return false; }
        if (!Objects.equals(this.getClose(), thatPriceStore.getClose())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getValueDate());
        hash = 31 * hash + Objects.hashCode(getOpen());
        hash = 31 * hash + Objects.hashCode(getHigh());
        hash = 31 * hash + Objects.hashCode(getLow());
        hash = 31 * hash + Objects.hashCode(getClose());
        return hash;
    }
    
    @Override
    public Class<PriceStore> entityClass() {
        return PriceStore.class;
    }
}