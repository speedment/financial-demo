package com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.Instrument;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.position_identifier.PositionIdentifier;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.raw_position.RawPosition;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table financialdemo.db0.piq.position_identifier.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedPositionIdentifierImpl extends AbstractBaseEntity<PositionIdentifier> implements PositionIdentifier {
    
    private Long id;
    private Long instrumentId;
    private Long traderId;
    
    protected GeneratedPositionIdentifierImpl() {
        
    }
    
    @Override
    public Trader findTraderId() {
        return managerOf_(Trader.class).findAny(Trader.ID, getTraderId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Trader is set to " + getTraderId()
                ));
            
    }
    
    @Override
    public Instrument findInstrumentId() {
        return managerOf_(Instrument.class).findAny(Instrument.ID, getInstrumentId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Instrument is set to " + getInstrumentId()
                ));
            
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public Long getInstrumentId() {
        return instrumentId;
    }
    
    @Override
    public Long getTraderId() {
        return traderId;
    }
    
    @Override
    public final PositionIdentifier setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final PositionIdentifier setInstrumentId(Long instrumentId) {
        this.instrumentId = instrumentId;
        return this;
    }
    
    @Override
    public final PositionIdentifier setTraderId(Long traderId) {
        this.traderId = traderId;
        return this;
    }
    
    @Override
    public Stream<RawPosition> findRawPositionsByPid() {
        return managerOf_(RawPosition.class)
                .stream().filter(RawPosition.PID.equal(this.getId()));
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("instrumentId = "+Objects.toString(getInstrumentId()));
        sj.add("traderId = "+Objects.toString(getTraderId()));
        return "PositionIdentifierImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof PositionIdentifier)) { return false; }
        final PositionIdentifier thatPositionIdentifier = (PositionIdentifier)that;
        if (!Objects.equals(this.getId(), thatPositionIdentifier.getId())) {return false; }
        if (!Objects.equals(this.getInstrumentId(), thatPositionIdentifier.getInstrumentId())) {return false; }
        if (!Objects.equals(this.getTraderId(), thatPositionIdentifier.getTraderId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getInstrumentId());
        hash = 31 * hash + Objects.hashCode(getTraderId());
        return hash;
    }
    
    @Override
    public Class<PositionIdentifier> entityClass() {
        return PositionIdentifier.class;
    }
    
    @Override
    public Stream<RawPosition> findRawPositions() {
        return findRawPositionsByPid();
    }
}