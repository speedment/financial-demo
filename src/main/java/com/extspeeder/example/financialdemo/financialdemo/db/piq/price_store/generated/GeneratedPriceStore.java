package com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.PriceStore;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.DoubleIdentityMapper;
import com.speedment.config.db.mapper.identity.LongIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table financialdemo.db0.piq.price_store.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedPriceStore extends Entity<PriceStore> {
    
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getId()} method.
     */
    final ComparableField<PriceStore, Long, Long> ID = new ComparableFieldImpl<>(Identifier.ID, PriceStore::getId, PriceStore::setId, new LongIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getValueDate()} method.
     */
    final ComparableField<PriceStore, Long, Long> VALUE_DATE = new ComparableFieldImpl<>(Identifier.VALUE_DATE, PriceStore::getValueDate, PriceStore::setValueDate, new LongIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getOpen()} method.
     */
    final ComparableField<PriceStore, Double, Double> OPEN = new ComparableFieldImpl<>(Identifier.OPEN, PriceStore::getOpen, PriceStore::setOpen, new DoubleIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getHigh()} method.
     */
    final ComparableField<PriceStore, Double, Double> HIGH = new ComparableFieldImpl<>(Identifier.HIGH, PriceStore::getHigh, PriceStore::setHigh, new DoubleIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getLow()} method.
     */
    final ComparableField<PriceStore, Double, Double> LOW = new ComparableFieldImpl<>(Identifier.LOW, PriceStore::getLow, PriceStore::setLow, new DoubleIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getClose()} method.
     */
    final ComparableField<PriceStore, Double, Double> CLOSE = new ComparableFieldImpl<>(Identifier.CLOSE, o -> o.getClose().orElse(null), PriceStore::setClose, new DoubleIdentityMapper(), false);
    
    /**
     * Returns the id of this PriceStore. The id field corresponds to the
     * database column db0.piq.price_store.id.
     * 
     * @return the id of this PriceStore
     */
    Long getId();
    
    /**
     * Returns the valueDate of this PriceStore. The valueDate field corresponds
     * to the database column db0.piq.price_store.value_date.
     * 
     * @return the valueDate of this PriceStore
     */
    Long getValueDate();
    
    /**
     * Returns the open of this PriceStore. The open field corresponds to the
     * database column db0.piq.price_store.open.
     * 
     * @return the open of this PriceStore
     */
    Double getOpen();
    
    /**
     * Returns the high of this PriceStore. The high field corresponds to the
     * database column db0.piq.price_store.high.
     * 
     * @return the high of this PriceStore
     */
    Double getHigh();
    
    /**
     * Returns the low of this PriceStore. The low field corresponds to the
     * database column db0.piq.price_store.low.
     * 
     * @return the low of this PriceStore
     */
    Double getLow();
    
    /**
     * Returns the close of this PriceStore. The close field corresponds to the
     * database column db0.piq.price_store.close.
     * 
     * @return the close of this PriceStore
     */
    Optional<Double> getClose();
    
    /**
     * Sets the id of this PriceStore. The id field corresponds to the database
     * column db0.piq.price_store.id.
     * 
     * @param id to set of this PriceStore
     * @return this PriceStore instance
     */
    PriceStore setId(Long id);
    
    /**
     * Sets the valueDate of this PriceStore. The valueDate field corresponds to
     * the database column db0.piq.price_store.value_date.
     * 
     * @param valueDate to set of this PriceStore
     * @return this PriceStore instance
     */
    PriceStore setValueDate(Long valueDate);
    
    /**
     * Sets the open of this PriceStore. The open field corresponds to the
     * database column db0.piq.price_store.open.
     * 
     * @param open to set of this PriceStore
     * @return this PriceStore instance
     */
    PriceStore setOpen(Double open);
    
    /**
     * Sets the high of this PriceStore. The high field corresponds to the
     * database column db0.piq.price_store.high.
     * 
     * @param high to set of this PriceStore
     * @return this PriceStore instance
     */
    PriceStore setHigh(Double high);
    
    /**
     * Sets the low of this PriceStore. The low field corresponds to the database
     * column db0.piq.price_store.low.
     * 
     * @param low to set of this PriceStore
     * @return this PriceStore instance
     */
    PriceStore setLow(Double low);
    
    /**
     * Sets the close of this PriceStore. The close field corresponds to the
     * database column db0.piq.price_store.close.
     * 
     * @param close to set of this PriceStore
     * @return this PriceStore instance
     */
    PriceStore setClose(Double close);
    
    enum Identifier implements FieldIdentifier<PriceStore> {
        
        ID ("id"),
        VALUE_DATE ("value_date"),
        OPEN ("open"),
        HIGH ("high"),
        LOW ("low"),
        CLOSE ("close");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "piq";
        }
        
        @Override
        public String tableName() {
            return "price_store";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}