package com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.PriceStore;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.price_store.PriceStoreImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.plugin.extspeeder.runtime.manager.AbstractExtSpeederSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table financialdemo.db0.piq.price_store.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedPriceStoreManagerImpl extends AbstractExtSpeederSqlManager<PriceStore> implements GeneratedPriceStoreManager {
    
    private final static Tuple1<Class<Long>> PRIMARY_KEY_CLASSES = Tuples.of(Long.class);
    
    protected GeneratedPriceStoreManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected PriceStore newEntityFrom(ResultSet resultSet) throws SQLException, SpeedmentException {
        final PriceStore entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getLong(1));
            entity.setValueDate(resultSet.getLong(2));
            entity.setOpen(resultSet.getDouble(3));
            entity.setHigh(resultSet.getDouble(4));
            entity.setLow(resultSet.getDouble(5));
            entity.setClose(getDouble(resultSet, 6));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public PriceStore newEmptyEntity() {
        return new PriceStoreImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(PriceStore entity, FieldIdentifier<PriceStore> identifier) {
        switch ((PriceStore.Identifier) identifier) {
            case ID : return entity.getId();
            case VALUE_DATE : return entity.getValueDate();
            case OPEN : return entity.getOpen();
            case HIGH : return entity.getHigh();
            case LOW : return entity.getLow();
            case CLOSE : return entity.getClose().orElse(null);
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(PriceStore entity, FieldIdentifier<PriceStore> identifier, Object value) {
        switch ((PriceStore.Identifier) identifier) {
            case ID : entity.setId((Long) value); break;
            case VALUE_DATE : entity.setValueDate((Long) value); break;
            case OPEN : entity.setOpen((Double) value); break;
            case HIGH : entity.setHigh((Double) value); break;
            case LOW : entity.setLow((Double) value); break;
            case CLOSE : entity.setClose((Double) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            PriceStore.ID,
            PriceStore.VALUE_DATE,
            PriceStore.OPEN,
            PriceStore.HIGH,
            PriceStore.LOW,
            PriceStore.CLOSE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            PriceStore.ID
        );
    }
    
    @Override
    public Tuple1<Class<Long>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public PriceStore newCopyOf(PriceStore source) {
        final PriceStore copy = new PriceStoreImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setId(source.getId());
        copy.setValueDate(source.getValueDate());
        copy.setOpen(source.getOpen());
        copy.setHigh(source.getHigh());
        copy.setLow(source.getLow());
        source.getClose().ifPresent(copy::setClose);
        
        return copy;
    }
}