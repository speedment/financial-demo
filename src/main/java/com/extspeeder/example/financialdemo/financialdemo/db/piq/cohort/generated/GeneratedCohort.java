package com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.Cohort;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.LongIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.time.TimestampToIntMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table financialdemo.db0.piq.cohort.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedCohort extends Entity<Cohort> {
    
    /**
     * This Field corresponds to the {@link Cohort} field that can be obtained
     * using the {@link Cohort#getId()} method.
     */
    final ComparableField<Cohort, Long, Long> ID = new ComparableFieldImpl<>(Identifier.ID, Cohort::getId, Cohort::setId, new LongIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Cohort} field that can be obtained
     * using the {@link Cohort#getName()} method.
     */
    final StringField<Cohort, String> NAME = new StringFieldImpl<>(Identifier.NAME, Cohort::getName, Cohort::setName, new StringIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Cohort} field that can be obtained
     * using the {@link Cohort#getEndDate()} method.
     */
    final ComparableField<Cohort, Timestamp, Integer> END_DATE = new ComparableFieldImpl<>(Identifier.END_DATE, o -> o.getEndDate().orElse(null), Cohort::setEndDate, new TimestampToIntMapper(), false);
    /**
     * This Field corresponds to the {@link Cohort} field that can be obtained
     * using the {@link Cohort#getStartDate()} method.
     */
    final ComparableField<Cohort, Timestamp, Integer> START_DATE = new ComparableFieldImpl<>(Identifier.START_DATE, o -> o.getStartDate().orElse(null), Cohort::setStartDate, new TimestampToIntMapper(), false);
    /**
     * This Field corresponds to the {@link Cohort} field that can be obtained
     * using the {@link Cohort#getCohortType()} method.
     */
    final StringField<Cohort, String> COHORT_TYPE = new StringFieldImpl<>(Identifier.COHORT_TYPE, Cohort::getCohortType, Cohort::setCohortType, new StringIdentityMapper(), false);
    
    /**
     * Returns the id of this Cohort. The id field corresponds to the database
     * column db0.piq.cohort.id.
     * 
     * @return the id of this Cohort
     */
    Long getId();
    
    /**
     * Returns the name of this Cohort. The name field corresponds to the
     * database column db0.piq.cohort.name.
     * 
     * @return the name of this Cohort
     */
    String getName();
    
    /**
     * Returns the endDate of this Cohort. The endDate field corresponds to the
     * database column db0.piq.cohort.end_date.
     * 
     * @return the endDate of this Cohort
     */
    Optional<Integer> getEndDate();
    
    /**
     * Returns the startDate of this Cohort. The startDate field corresponds to
     * the database column db0.piq.cohort.start_date.
     * 
     * @return the startDate of this Cohort
     */
    Optional<Integer> getStartDate();
    
    /**
     * Returns the cohortType of this Cohort. The cohortType field corresponds to
     * the database column db0.piq.cohort.cohort_type.
     * 
     * @return the cohortType of this Cohort
     */
    String getCohortType();
    
    /**
     * Sets the id of this Cohort. The id field corresponds to the database
     * column db0.piq.cohort.id.
     * 
     * @param id to set of this Cohort
     * @return this Cohort instance
     */
    Cohort setId(Long id);
    
    /**
     * Sets the name of this Cohort. The name field corresponds to the database
     * column db0.piq.cohort.name.
     * 
     * @param name to set of this Cohort
     * @return this Cohort instance
     */
    Cohort setName(String name);
    
    /**
     * Sets the endDate of this Cohort. The endDate field corresponds to the
     * database column db0.piq.cohort.end_date.
     * 
     * @param endDate to set of this Cohort
     * @return this Cohort instance
     */
    Cohort setEndDate(Integer endDate);
    
    /**
     * Sets the startDate of this Cohort. The startDate field corresponds to the
     * database column db0.piq.cohort.start_date.
     * 
     * @param startDate to set of this Cohort
     * @return this Cohort instance
     */
    Cohort setStartDate(Integer startDate);
    
    /**
     * Sets the cohortType of this Cohort. The cohortType field corresponds to
     * the database column db0.piq.cohort.cohort_type.
     * 
     * @param cohortType to set of this Cohort
     * @return this Cohort instance
     */
    Cohort setCohortType(String cohortType);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Trader} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Trader#getCohortId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Trader} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Trader#getCohortId()}
     */
    Stream<Trader> findTradersByCohortId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Trader} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Trader} Entities
     * that references this Entity by a foreign key
     */
    Stream<Trader> findTraders();
    
    enum Identifier implements FieldIdentifier<Cohort> {
        
        ID ("id"),
        NAME ("name"),
        END_DATE ("end_date"),
        START_DATE ("start_date"),
        COHORT_TYPE ("cohort_type");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "piq";
        }
        
        @Override
        public String tableName() {
            return "cohort";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}