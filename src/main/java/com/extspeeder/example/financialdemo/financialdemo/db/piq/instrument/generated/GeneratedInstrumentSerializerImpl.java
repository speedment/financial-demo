package com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.instrument.Instrument;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named instrument.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedInstrumentSerializerImpl extends AbstractEntitySerializer<Instrument> {
    
    protected final static long serialVersionUID = -2139208920;
    private final static Serializer<Long> ID_SERIALIZER = SerializerFactory.serializerOf(Long.class);
    private final static Serializer<String> INDUSTRY_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> NAME_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> SECTOR_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> SYMBOL_SERIALIZER = SerializerFactory.serializerOf(String.class);
    
    public GeneratedInstrumentSerializerImpl(Manager<Instrument> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Instrument instrument) throws IOException {
        final long[] bits = new long[1];
        if (!instrument.getIndustry().isPresent()) BitSetUtil.set(bits, 0);
        if (!instrument.getName().isPresent()) BitSetUtil.set(bits, 1);
        if (!instrument.getSector().isPresent()) BitSetUtil.set(bits, 2);
        out.writeLong(bits[0]);
        out.writeLong(instrument.getId());
        if (instrument.getIndustry().isPresent()) out.writeUTF(instrument.getIndustry().get());
        if (instrument.getName().isPresent()) out.writeUTF(instrument.getName().get());
        if (instrument.getSector().isPresent()) out.writeUTF(instrument.getSector().get());
        out.writeUTF(instrument.getSymbol());
    }
    
    @Override
    public Instrument deserialize(final DataInput in, final int available) throws IOException {
        final Instrument instrument = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        instrument.setId(in.readLong());
        if (!BitSetUtil.get0(bits)) instrument.setIndustry(in.readUTF());
        if (!BitSetUtil.get1(bits)) instrument.setName(in.readUTF());
        if (!BitSetUtil.get2(bits)) instrument.setSector(in.readUTF());
        instrument.setSymbol(in.readUTF());
        return instrument;
    }
}