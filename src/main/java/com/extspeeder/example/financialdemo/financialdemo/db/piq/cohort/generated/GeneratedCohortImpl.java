package com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.generated;

import com.extspeeder.example.financialdemo.financialdemo.db.piq.cohort.Cohort;
import com.extspeeder.example.financialdemo.financialdemo.db.piq.trader.Trader;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table financialdemo.db0.piq.cohort.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedCohortImpl extends AbstractBaseEntity<Cohort> implements Cohort {
    
    private Long id;
    private String name;
    private Integer endDate;
    private Integer startDate;
    private String cohortType;
    
    protected GeneratedCohortImpl() {
        
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public Optional<Integer> getEndDate() {
        return Optional.ofNullable(endDate);
    }
    
    @Override
    public Optional<Integer> getStartDate() {
        return Optional.ofNullable(startDate);
    }
    
    @Override
    public String getCohortType() {
        return cohortType;
    }
    
    @Override
    public final Cohort setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final Cohort setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final Cohort setEndDate(Integer endDate) {
        this.endDate = endDate;
        return this;
    }
    
    @Override
    public final Cohort setStartDate(Integer startDate) {
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public final Cohort setCohortType(String cohortType) {
        this.cohortType = cohortType;
        return this;
    }
    
    @Override
    public Stream<Trader> findTradersByCohortId() {
        return managerOf_(Trader.class)
                .stream().filter(Trader.COHORT_ID.equal(this.getId()));
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("name = "+Objects.toString(getName()));
        sj.add("endDate = "+Objects.toString(getEndDate().orElse(null)));
        sj.add("startDate = "+Objects.toString(getStartDate().orElse(null)));
        sj.add("cohortType = "+Objects.toString(getCohortType()));
        return "CohortImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Cohort)) { return false; }
        final Cohort thatCohort = (Cohort)that;
        if (!Objects.equals(this.getId(), thatCohort.getId())) {return false; }
        if (!Objects.equals(this.getName(), thatCohort.getName())) {return false; }
        if (!Objects.equals(this.getEndDate(), thatCohort.getEndDate())) {return false; }
        if (!Objects.equals(this.getStartDate(), thatCohort.getStartDate())) {return false; }
        if (!Objects.equals(this.getCohortType(), thatCohort.getCohortType())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getEndDate());
        hash = 31 * hash + Objects.hashCode(getStartDate());
        hash = 31 * hash + Objects.hashCode(getCohortType());
        return hash;
    }
    
    @Override
    public Class<Cohort> entityClass() {
        return Cohort.class;
    }
    
    @Override
    public Stream<Trader> findTraders() {
        return findTradersByCohortId();
    }
}