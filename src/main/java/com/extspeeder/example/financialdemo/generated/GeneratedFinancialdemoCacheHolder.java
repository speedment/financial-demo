package com.extspeeder.example.financialdemo.generated;

import com.extspeeder.example.financialdemo.db.order.Order;
import com.extspeeder.example.financialdemo.db.order.generated.GeneratedOrderCacheHolder;
import com.extspeeder.example.financialdemo.db.position.RawPosition;
import com.extspeeder.example.financialdemo.db.position.generated.GeneratedRawPositionCacheHolder;
import com.extspeeder.example.financialdemo.db.prices.PriceStore;
import com.extspeeder.example.financialdemo.db.prices.generated.GeneratedPriceStoreCacheHolder;
import com.speedment.enterprise.fastcache.runtime.FastCacheHolder;
import com.speedment.enterprise.fastcache.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.fastcache.runtime.entitystore.EntityStore;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.fastcache.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import java.util.Map;
import javax.annotation.Generated;
import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class GeneratedFinancialdemoCacheHolder implements FastCacheHolder {
    
    private final GeneratedRawPositionCacheHolder rawPositionHolder;
    private final GeneratedOrderCacheHolder orderHolder;
    private final GeneratedPriceStoreCacheHolder priceStoreHolder;
    
    public GeneratedFinancialdemoCacheHolder(GeneratedRawPositionCacheHolder rawPositionHolder, GeneratedOrderCacheHolder orderHolder, GeneratedPriceStoreCacheHolder priceStoreHolder) {
        
        this.rawPositionHolder = requireNonNull(rawPositionHolder);
        this.orderHolder       = requireNonNull(orderHolder);
        this.priceStoreHolder  = requireNonNull(priceStoreHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(String dbmsName, String schemaName, String tableName) {
        switch (tableName) {
            case "daily_position_performance" : return (EntityStore<ENTITY>) rawPositionHolder.getEntityStore();
            case "orders"                     : return (EntityStore<ENTITY>) orderHolder.getEntityStore();
            case "price_store"                : return (EntityStore<ENTITY>) priceStoreHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T> FieldCache<ENTITY, T> getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableName()) {
            case "daily_position_performance" : return (FieldCache<ENTITY, T>) rawPositionHolder.getFieldCache((ColumnIdentifier<RawPosition>) columnId);
            case "orders"                     : return (FieldCache<ENTITY, T>) orderHolder.getFieldCache((ColumnIdentifier<Order>) columnId);
            case "price_store"                : return (FieldCache<ENTITY, T>) priceStoreHolder.getFieldCache((ColumnIdentifier<PriceStore>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableName())
            );
        }
    }
    
    @Override
    public void close() {
        this.rawPositionHolder.close();
        this.orderHolder.close();
        this.priceStoreHolder.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.create(
            rawPositionHolder,
            orderHolder,
            priceStoreHolder
        );
    }
}