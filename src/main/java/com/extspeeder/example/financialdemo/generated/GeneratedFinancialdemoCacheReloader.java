package com.extspeeder.example.financialdemo.generated;

import com.extspeeder.example.financialdemo.db.order.generated.GeneratedOrderCacheHolder;
import com.extspeeder.example.financialdemo.db.position.generated.GeneratedRawPositionCacheHolder;
import com.extspeeder.example.financialdemo.db.prices.generated.GeneratedPriceStoreCacheHolder;
import com.speedment.enterprise.fastcache.runtime.FastCacheHolder;
import com.speedment.enterprise.fastcache.runtime.FastCacheReloader;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.core.internal.util.testing.Stopwatch;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import javax.annotation.Generated;

/**
 * A reloader that loads updates from a stream source and creates a new holder
 * for that state.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class GeneratedFinancialdemoCacheReloader implements FastCacheReloader {
    
    @Override
    public FastCacheHolder reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        final Stopwatch sw = Stopwatch.createStarted();
        final CompletableFuture<GeneratedRawPositionCacheHolder> rawPositionHolder = 
            GeneratedRawPositionCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedOrderCacheHolder> orderHolder = 
            GeneratedOrderCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedPriceStoreCacheHolder> priceStoreHolder = 
            GeneratedPriceStoreCacheHolder.reload(streamSupplier, executor);
        
        try {
            return new GeneratedFinancialdemoCacheHolder(
                rawPositionHolder.get(),
                orderHolder.get(),
                priceStoreHolder.get()
            );
        } catch (final ExecutionException | InterruptedException ex) {
            throw new RuntimeException("Error reloading caches.", ex);
        } finally {
            System.out.format("Finished reloading in %s.%n", sw.stop());
        }
    }
}