package com.extspeeder.example.financialdemo.db.prices.generated;

import com.extspeeder.example.financialdemo.db.prices.PriceStore;
import com.extspeeder.example.financialdemo.db.prices.PriceStoreImpl;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.extspeeder.example.financialdemo.db.prices.PriceStore} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedPriceStoreSqlAdapter {
    
    private final TableIdentifier<PriceStore> tableIdentifier;
    private SqlTypeMapperHelper<Long, Integer> valueDateHelper;
    private SqlTypeMapperHelper<Double, Float> openHelper;
    private SqlTypeMapperHelper<Double, Float> highHelper;
    private SqlTypeMapperHelper<Double, Float> lowHelper;
    private SqlTypeMapperHelper<Double, Float> closeHelper;
    
    protected GeneratedPriceStoreSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "piq", "price_store");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(SqlStreamSupplierComponent streamSupplierComponent, SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected PriceStore apply(ResultSet resultSet) throws SpeedmentException {
        final PriceStore entity = createEntity();
        try {
            entity.setId(               resultSet.getLong(1)                        );
            entity.setValueDate(        valueDateHelper.apply(resultSet.getLong(2)) );
            entity.setOpen(             openHelper.apply(resultSet.getDouble(3))    );
            entity.setHigh(             highHelper.apply(resultSet.getDouble(4))    );
            entity.setLow(              lowHelper.apply(resultSet.getDouble(5))     );
            entity.setClose(            closeHelper.apply(getDouble(resultSet, 6))  );
            entity.setInstrumentSymbol( resultSet.getString(7)                      );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected PriceStoreImpl createEntity() {
        return new PriceStoreImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        valueDateHelper = SqlTypeMapperHelper.create(project, PriceStore.VALUE_DATE, PriceStore.class);
        openHelper = SqlTypeMapperHelper.create(project, PriceStore.OPEN, PriceStore.class);
        highHelper = SqlTypeMapperHelper.create(project, PriceStore.HIGH, PriceStore.class);
        lowHelper = SqlTypeMapperHelper.create(project, PriceStore.LOW, PriceStore.class);
        closeHelper = SqlTypeMapperHelper.create(project, PriceStore.CLOSE, PriceStore.class);
    }
}