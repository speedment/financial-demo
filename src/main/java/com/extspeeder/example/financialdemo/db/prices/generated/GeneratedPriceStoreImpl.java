package com.extspeeder.example.financialdemo.db.prices.generated;

import com.extspeeder.example.financialdemo.db.prices.PriceStore;
import java.util.Objects;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.extspeeder.example.financialdemo.db.prices.PriceStore}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedPriceStoreImpl implements PriceStore {
    
    private long id;
    private int valueDate;
    private float open;
    private float high;
    private float low;
    private Float close;
    private String instrumentSymbol;
    
    protected GeneratedPriceStoreImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public int getValueDate() {
        return valueDate;
    }
    
    @Override
    public float getOpen() {
        return open;
    }
    
    @Override
    public float getHigh() {
        return high;
    }
    
    @Override
    public float getLow() {
        return low;
    }
    
    @Override
    public Float getClose() {
        return close;
    }
    
    @Override
    public String getInstrumentSymbol() {
        return instrumentSymbol;
    }
    
    @Override
    public PriceStore setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public PriceStore setValueDate(int valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    @Override
    public PriceStore setOpen(float open) {
        this.open = open;
        return this;
    }
    
    @Override
    public PriceStore setHigh(float high) {
        this.high = high;
        return this;
    }
    
    @Override
    public PriceStore setLow(float low) {
        this.low = low;
        return this;
    }
    
    @Override
    public PriceStore setClose(Float close) {
        this.close = close;
        return this;
    }
    
    @Override
    public PriceStore setInstrumentSymbol(String instrumentSymbol) {
        this.instrumentSymbol = instrumentSymbol;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "               + Objects.toString(getId()));
        sj.add("valueDate = "        + Objects.toString(getValueDate()));
        sj.add("open = "             + Objects.toString(getOpen()));
        sj.add("high = "             + Objects.toString(getHigh()));
        sj.add("low = "              + Objects.toString(getLow()));
        sj.add("close = "            + Objects.toString(getClose()));
        sj.add("instrumentSymbol = " + Objects.toString(getInstrumentSymbol()));
        return "PriceStoreImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof PriceStore)) { return false; }
        final PriceStore thatPriceStore = (PriceStore)that;
        if (this.getId() != thatPriceStore.getId()) {return false; }
        if (this.getValueDate() != thatPriceStore.getValueDate()) {return false; }
        if (this.getOpen() != thatPriceStore.getOpen()) {return false; }
        if (this.getHigh() != thatPriceStore.getHigh()) {return false; }
        if (this.getLow() != thatPriceStore.getLow()) {return false; }
        if (!Objects.equals(this.getClose(), thatPriceStore.getClose())) {return false; }
        if (!Objects.equals(this.getInstrumentSymbol(), thatPriceStore.getInstrumentSymbol())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getValueDate());
        hash = 31 * hash + Float.hashCode(getOpen());
        hash = 31 * hash + Float.hashCode(getHigh());
        hash = 31 * hash + Float.hashCode(getLow());
        hash = 31 * hash + Objects.hashCode(getClose());
        hash = 31 * hash + Objects.hashCode(getInstrumentSymbol());
        return hash;
    }
}