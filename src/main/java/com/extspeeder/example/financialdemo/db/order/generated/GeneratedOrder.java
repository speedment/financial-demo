package com.extspeeder.example.financialdemo.db.order.generated;

import com.extspeeder.example.financialdemo.db.order.Order;
import com.extspeeder.example.financialdemo.extra.BuySell;
import com.extspeeder.example.financialdemo.extra.BuySellMapper;
import com.extspeeder.example.financialdemo.extra.CohortType;
import com.extspeeder.example.financialdemo.extra.CohortTypeMapper;
import com.extspeeder.example.financialdemo.extra.DateIntToShortMapper;
import com.extspeeder.example.financialdemo.extra.OrderType;
import com.extspeeder.example.financialdemo.extra.OrderTypeMapper;
import com.extspeeder.example.financialdemo.extra.Status;
import com.extspeeder.example.financialdemo.extra.StatusMapper;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.FloatField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.ShortField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.doubles.DoubleToFloatMapper;
import com.speedment.runtime.typemapper.doubles.PrimitiveDoubleToFloatMapper;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.extspeeder.example.financialdemo.db.order.Order}-interface representing
 * entities of the {@code orders}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedOrder {
    
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getId()} method.
     */
    final LongField<Order, Long> ID = LongField.create(
        Identifier.ID,
        Order::getId,
        Order::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getDateCreated()} method.
     */
    final ShortField<Order, Integer> DATE_CREATED = ShortField.create(
        Identifier.DATE_CREATED,
        Order::getDateCreated,
        Order::setDateCreated,
        new DateIntToShortMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getDirection()} method.
     */
    final ComparableField<Order, String, BuySell> DIRECTION = ComparableField.create(
        Identifier.DIRECTION,
        Order::getDirection,
        Order::setDirection,
        new BuySellMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getOrderType()} method.
     */
    final ComparableField<Order, String, OrderType> ORDER_TYPE = ComparableField.create(
        Identifier.ORDER_TYPE,
        Order::getOrderType,
        Order::setOrderType,
        new OrderTypeMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getQuantity()} method.
     */
    final IntField<Order, Integer> QUANTITY = IntField.create(
        Identifier.QUANTITY,
        Order::getQuantity,
        Order::setQuantity,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getStatus()} method.
     */
    final ComparableField<Order, String, Status> STATUS = ComparableField.create(
        Identifier.STATUS,
        Order::getStatus,
        Order::setStatus,
        new StatusMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getLimitPrice()} method.
     */
    final ComparableField<Order, Double, Float> LIMIT_PRICE = ComparableField.create(
        Identifier.LIMIT_PRICE,
        Order::getLimitPrice,
        Order::setLimitPrice,
        new DoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getInstrumentSymbol()} method.
     */
    final StringField<Order, String> INSTRUMENT_SYMBOL = StringField.create(
        Identifier.INSTRUMENT_SYMBOL,
        Order::getInstrumentSymbol,
        Order::setInstrumentSymbol,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getInstrumentSector()} method.
     */
    final StringField<Order, String> INSTRUMENT_SECTOR = StringField.create(
        Identifier.INSTRUMENT_SECTOR,
        o -> OptionalUtil.unwrap(o.getInstrumentSector()),
        Order::setInstrumentSector,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getInstrumentIndustry()} method.
     */
    final StringField<Order, String> INSTRUMENT_INDUSTRY = StringField.create(
        Identifier.INSTRUMENT_INDUSTRY,
        o -> OptionalUtil.unwrap(o.getInstrumentIndustry()),
        Order::setInstrumentIndustry,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getTraderName()} method.
     */
    final StringField<Order, String> TRADER_NAME = StringField.create(
        Identifier.TRADER_NAME,
        Order::getTraderName,
        Order::setTraderName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getTraderGroup()} method.
     */
    final StringField<Order, String> TRADER_GROUP = StringField.create(
        Identifier.TRADER_GROUP,
        Order::getTraderGroup,
        Order::setTraderGroup,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getTraderGroupType()} method.
     */
    final ComparableField<Order, String, CohortType> TRADER_GROUP_TYPE = ComparableField.create(
        Identifier.TRADER_GROUP_TYPE,
        Order::getTraderGroupType,
        Order::setTraderGroupType,
        new CohortTypeMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getPrice()} method.
     */
    final FloatField<Order, Double> PRICE = FloatField.create(
        Identifier.PRICE,
        Order::getPrice,
        Order::setPrice,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getDateExecuted()} method.
     */
    final ShortField<Order, Integer> DATE_EXECUTED = ShortField.create(
        Identifier.DATE_EXECUTED,
        Order::getDateExecuted,
        Order::setDateExecuted,
        new DateIntToShortMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Order} field that can be obtained
     * using the {@link Order#getInstrumentName()} method.
     */
    final StringField<Order, String> INSTRUMENT_NAME = StringField.create(
        Identifier.INSTRUMENT_NAME,
        o -> OptionalUtil.unwrap(o.getInstrumentName()),
        Order::setInstrumentName,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Order. The id field corresponds to the database
     * column db0.piq.orders.id.
     * 
     * @return the id of this Order
     */
    long getId();
    
    /**
     * Returns the dateCreated of this Order. The dateCreated field corresponds
     * to the database column db0.piq.orders.date_created_int.
     * 
     * @return the dateCreated of this Order
     */
    short getDateCreated();
    
    /**
     * Returns the direction of this Order. The direction field corresponds to
     * the database column db0.piq.orders.direction.
     * 
     * @return the direction of this Order
     */
    BuySell getDirection();
    
    /**
     * Returns the orderType of this Order. The orderType field corresponds to
     * the database column db0.piq.orders.order_type.
     * 
     * @return the orderType of this Order
     */
    OrderType getOrderType();
    
    /**
     * Returns the quantity of this Order. The quantity field corresponds to the
     * database column db0.piq.orders.quantity.
     * 
     * @return the quantity of this Order
     */
    int getQuantity();
    
    /**
     * Returns the status of this Order. The status field corresponds to the
     * database column db0.piq.orders.status.
     * 
     * @return the status of this Order
     */
    Status getStatus();
    
    /**
     * Returns the limitPrice of this Order. The limitPrice field corresponds to
     * the database column db0.piq.orders.limit_price.
     * 
     * @return the limitPrice of this Order
     */
    Float getLimitPrice();
    
    /**
     * Returns the instrumentSymbol of this Order. The instrumentSymbol field
     * corresponds to the database column db0.piq.orders.instrument_symbol.
     * 
     * @return the instrumentSymbol of this Order
     */
    String getInstrumentSymbol();
    
    /**
     * Returns the instrumentSector of this Order. The instrumentSector field
     * corresponds to the database column db0.piq.orders.instrument_sector.
     * 
     * @return the instrumentSector of this Order
     */
    Optional<String> getInstrumentSector();
    
    /**
     * Returns the instrumentIndustry of this Order. The instrumentIndustry
     * field corresponds to the database column
     * db0.piq.orders.instrument_industry.
     * 
     * @return the instrumentIndustry of this Order
     */
    Optional<String> getInstrumentIndustry();
    
    /**
     * Returns the traderName of this Order. The traderName field corresponds to
     * the database column db0.piq.orders.trader_name.
     * 
     * @return the traderName of this Order
     */
    String getTraderName();
    
    /**
     * Returns the traderGroup of this Order. The traderGroup field corresponds
     * to the database column db0.piq.orders.trader_group.
     * 
     * @return the traderGroup of this Order
     */
    String getTraderGroup();
    
    /**
     * Returns the traderGroupType of this Order. The traderGroupType field
     * corresponds to the database column db0.piq.orders.trader_group_type.
     * 
     * @return the traderGroupType of this Order
     */
    CohortType getTraderGroupType();
    
    /**
     * Returns the price of this Order. The price field corresponds to the
     * database column db0.piq.orders.price.
     * 
     * @return the price of this Order
     */
    float getPrice();
    
    /**
     * Returns the dateExecuted of this Order. The dateExecuted field
     * corresponds to the database column db0.piq.orders.date_executed.
     * 
     * @return the dateExecuted of this Order
     */
    short getDateExecuted();
    
    /**
     * Returns the instrumentName of this Order. The instrumentName field
     * corresponds to the database column db0.piq.orders.instrument_name.
     * 
     * @return the instrumentName of this Order
     */
    Optional<String> getInstrumentName();
    
    /**
     * Sets the id of this Order. The id field corresponds to the database
     * column db0.piq.orders.id.
     * 
     * @param id to set of this Order
     * @return   this Order instance
     */
    Order setId(long id);
    
    /**
     * Sets the dateCreated of this Order. The dateCreated field corresponds to
     * the database column db0.piq.orders.date_created_int.
     * 
     * @param dateCreated to set of this Order
     * @return            this Order instance
     */
    Order setDateCreated(short dateCreated);
    
    /**
     * Sets the direction of this Order. The direction field corresponds to the
     * database column db0.piq.orders.direction.
     * 
     * @param direction to set of this Order
     * @return          this Order instance
     */
    Order setDirection(BuySell direction);
    
    /**
     * Sets the orderType of this Order. The orderType field corresponds to the
     * database column db0.piq.orders.order_type.
     * 
     * @param orderType to set of this Order
     * @return          this Order instance
     */
    Order setOrderType(OrderType orderType);
    
    /**
     * Sets the quantity of this Order. The quantity field corresponds to the
     * database column db0.piq.orders.quantity.
     * 
     * @param quantity to set of this Order
     * @return         this Order instance
     */
    Order setQuantity(int quantity);
    
    /**
     * Sets the status of this Order. The status field corresponds to the
     * database column db0.piq.orders.status.
     * 
     * @param status to set of this Order
     * @return       this Order instance
     */
    Order setStatus(Status status);
    
    /**
     * Sets the limitPrice of this Order. The limitPrice field corresponds to
     * the database column db0.piq.orders.limit_price.
     * 
     * @param limitPrice to set of this Order
     * @return           this Order instance
     */
    Order setLimitPrice(Float limitPrice);
    
    /**
     * Sets the instrumentSymbol of this Order. The instrumentSymbol field
     * corresponds to the database column db0.piq.orders.instrument_symbol.
     * 
     * @param instrumentSymbol to set of this Order
     * @return                 this Order instance
     */
    Order setInstrumentSymbol(String instrumentSymbol);
    
    /**
     * Sets the instrumentSector of this Order. The instrumentSector field
     * corresponds to the database column db0.piq.orders.instrument_sector.
     * 
     * @param instrumentSector to set of this Order
     * @return                 this Order instance
     */
    Order setInstrumentSector(String instrumentSector);
    
    /**
     * Sets the instrumentIndustry of this Order. The instrumentIndustry field
     * corresponds to the database column db0.piq.orders.instrument_industry.
     * 
     * @param instrumentIndustry to set of this Order
     * @return                   this Order instance
     */
    Order setInstrumentIndustry(String instrumentIndustry);
    
    /**
     * Sets the traderName of this Order. The traderName field corresponds to
     * the database column db0.piq.orders.trader_name.
     * 
     * @param traderName to set of this Order
     * @return           this Order instance
     */
    Order setTraderName(String traderName);
    
    /**
     * Sets the traderGroup of this Order. The traderGroup field corresponds to
     * the database column db0.piq.orders.trader_group.
     * 
     * @param traderGroup to set of this Order
     * @return            this Order instance
     */
    Order setTraderGroup(String traderGroup);
    
    /**
     * Sets the traderGroupType of this Order. The traderGroupType field
     * corresponds to the database column db0.piq.orders.trader_group_type.
     * 
     * @param traderGroupType to set of this Order
     * @return                this Order instance
     */
    Order setTraderGroupType(CohortType traderGroupType);
    
    /**
     * Sets the price of this Order. The price field corresponds to the database
     * column db0.piq.orders.price.
     * 
     * @param price to set of this Order
     * @return      this Order instance
     */
    Order setPrice(float price);
    
    /**
     * Sets the dateExecuted of this Order. The dateExecuted field corresponds
     * to the database column db0.piq.orders.date_executed.
     * 
     * @param dateExecuted to set of this Order
     * @return             this Order instance
     */
    Order setDateExecuted(short dateExecuted);
    
    /**
     * Sets the instrumentName of this Order. The instrumentName field
     * corresponds to the database column db0.piq.orders.instrument_name.
     * 
     * @param instrumentName to set of this Order
     * @return               this Order instance
     */
    Order setInstrumentName(String instrumentName);
    
    enum Identifier implements ColumnIdentifier<Order> {
        
        ID                  ("id"),
        DATE_CREATED        ("date_created_int"),
        DIRECTION           ("direction"),
        ORDER_TYPE          ("order_type"),
        QUANTITY            ("quantity"),
        STATUS              ("status"),
        LIMIT_PRICE         ("limit_price"),
        INSTRUMENT_SYMBOL   ("instrument_symbol"),
        INSTRUMENT_SECTOR   ("instrument_sector"),
        INSTRUMENT_INDUSTRY ("instrument_industry"),
        TRADER_NAME         ("trader_name"),
        TRADER_GROUP        ("trader_group"),
        TRADER_GROUP_TYPE   ("trader_group_type"),
        PRICE               ("price"),
        DATE_EXECUTED       ("date_executed"),
        INSTRUMENT_NAME     ("instrument_name");
        
        private final String columnName;
        private final TableIdentifier<Order> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db0";
        }
        
        @Override
        public String getSchemaName() {
            return "piq";
        }
        
        @Override
        public String getTableName() {
            return "orders";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Order> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}