package com.extspeeder.example.financialdemo.db.order.generated;

import com.extspeeder.example.financialdemo.db.order.Order;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.web.licenseservice.fastpiq.helper.BuySell;
import com.speedment.web.licenseservice.fastpiq.helper.CohortType;
import com.speedment.web.licenseservice.fastpiq.helper.OrderType;
import com.speedment.web.licenseservice.fastpiq.helper.Status;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.extspeeder.example.financialdemo.db.order.Order}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedOrderImpl implements Order {
    
    private long id;
    private short dateCreated;
    private BuySell direction;
    private OrderType orderType;
    private int quantity;
    private Status status;
    private Float limitPrice;
    private String instrumentSymbol;
    private String instrumentSector;
    private String instrumentIndustry;
    private String traderName;
    private String traderGroup;
    private CohortType traderGroupType;
    private float price;
    private short dateExecuted;
    private String instrumentName;
    
    protected GeneratedOrderImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public short getDateCreated() {
        return dateCreated;
    }
    
    @Override
    public BuySell getDirection() {
        return direction;
    }
    
    @Override
    public OrderType getOrderType() {
        return orderType;
    }
    
    @Override
    public int getQuantity() {
        return quantity;
    }
    
    @Override
    public Status getStatus() {
        return status;
    }
    
    @Override
    public Float getLimitPrice() {
        return limitPrice;
    }
    
    @Override
    public String getInstrumentSymbol() {
        return instrumentSymbol;
    }
    
    @Override
    public Optional<String> getInstrumentSector() {
        return Optional.ofNullable(instrumentSector);
    }
    
    @Override
    public Optional<String> getInstrumentIndustry() {
        return Optional.ofNullable(instrumentIndustry);
    }
    
    @Override
    public String getTraderName() {
        return traderName;
    }
    
    @Override
    public String getTraderGroup() {
        return traderGroup;
    }
    
    @Override
    public CohortType getTraderGroupType() {
        return traderGroupType;
    }
    
    @Override
    public float getPrice() {
        return price;
    }
    
    @Override
    public short getDateExecuted() {
        return dateExecuted;
    }
    
    @Override
    public Optional<String> getInstrumentName() {
        return Optional.ofNullable(instrumentName);
    }
    
    @Override
    public Order setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Order setDateCreated(short dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    @Override
    public Order setDirection(BuySell direction) {
        this.direction = direction;
        return this;
    }
    
    @Override
    public Order setOrderType(OrderType orderType) {
        this.orderType = orderType;
        return this;
    }
    
    @Override
    public Order setQuantity(int quantity) {
        this.quantity = quantity;
        return this;
    }
    
    @Override
    public Order setStatus(Status status) {
        this.status = status;
        return this;
    }
    
    @Override
    public Order setLimitPrice(Float limitPrice) {
        this.limitPrice = limitPrice;
        return this;
    }
    
    @Override
    public Order setInstrumentSymbol(String instrumentSymbol) {
        this.instrumentSymbol = instrumentSymbol;
        return this;
    }
    
    @Override
    public Order setInstrumentSector(String instrumentSector) {
        this.instrumentSector = instrumentSector;
        return this;
    }
    
    @Override
    public Order setInstrumentIndustry(String instrumentIndustry) {
        this.instrumentIndustry = instrumentIndustry;
        return this;
    }
    
    @Override
    public Order setTraderName(String traderName) {
        this.traderName = traderName;
        return this;
    }
    
    @Override
    public Order setTraderGroup(String traderGroup) {
        this.traderGroup = traderGroup;
        return this;
    }
    
    @Override
    public Order setTraderGroupType(CohortType traderGroupType) {
        this.traderGroupType = traderGroupType;
        return this;
    }
    
    @Override
    public Order setPrice(float price) {
        this.price = price;
        return this;
    }
    
    @Override
    public Order setDateExecuted(short dateExecuted) {
        this.dateExecuted = dateExecuted;
        return this;
    }
    
    @Override
    public Order setInstrumentName(String instrumentName) {
        this.instrumentName = instrumentName;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "                 + Objects.toString(getId()));
        sj.add("dateCreated = "        + Objects.toString(getDateCreated()));
        sj.add("direction = "          + Objects.toString(getDirection()));
        sj.add("orderType = "          + Objects.toString(getOrderType()));
        sj.add("quantity = "           + Objects.toString(getQuantity()));
        sj.add("status = "             + Objects.toString(getStatus()));
        sj.add("limitPrice = "         + Objects.toString(getLimitPrice()));
        sj.add("instrumentSymbol = "   + Objects.toString(getInstrumentSymbol()));
        sj.add("instrumentSector = "   + Objects.toString(OptionalUtil.unwrap(getInstrumentSector())));
        sj.add("instrumentIndustry = " + Objects.toString(OptionalUtil.unwrap(getInstrumentIndustry())));
        sj.add("traderName = "         + Objects.toString(getTraderName()));
        sj.add("traderGroup = "        + Objects.toString(getTraderGroup()));
        sj.add("traderGroupType = "    + Objects.toString(getTraderGroupType()));
        sj.add("price = "              + Objects.toString(getPrice()));
        sj.add("dateExecuted = "       + Objects.toString(getDateExecuted()));
        sj.add("instrumentName = "     + Objects.toString(OptionalUtil.unwrap(getInstrumentName())));
        return "OrderImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Order)) { return false; }
        final Order thatOrder = (Order)that;
        if (this.getId() != thatOrder.getId()) {return false; }
        if (this.getDateCreated() != thatOrder.getDateCreated()) {return false; }
        if (!Objects.equals(this.getDirection(), thatOrder.getDirection())) {return false; }
        if (!Objects.equals(this.getOrderType(), thatOrder.getOrderType())) {return false; }
        if (this.getQuantity() != thatOrder.getQuantity()) {return false; }
        if (!Objects.equals(this.getStatus(), thatOrder.getStatus())) {return false; }
        if (!Objects.equals(this.getLimitPrice(), thatOrder.getLimitPrice())) {return false; }
        if (!Objects.equals(this.getInstrumentSymbol(), thatOrder.getInstrumentSymbol())) {return false; }
        if (!Objects.equals(this.getInstrumentSector(), thatOrder.getInstrumentSector())) {return false; }
        if (!Objects.equals(this.getInstrumentIndustry(), thatOrder.getInstrumentIndustry())) {return false; }
        if (!Objects.equals(this.getTraderName(), thatOrder.getTraderName())) {return false; }
        if (!Objects.equals(this.getTraderGroup(), thatOrder.getTraderGroup())) {return false; }
        if (!Objects.equals(this.getTraderGroupType(), thatOrder.getTraderGroupType())) {return false; }
        if (this.getPrice() != thatOrder.getPrice()) {return false; }
        if (this.getDateExecuted() != thatOrder.getDateExecuted()) {return false; }
        if (!Objects.equals(this.getInstrumentName(), thatOrder.getInstrumentName())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Short.hashCode(getDateCreated());
        hash = 31 * hash + Objects.hashCode(getDirection());
        hash = 31 * hash + Objects.hashCode(getOrderType());
        hash = 31 * hash + Integer.hashCode(getQuantity());
        hash = 31 * hash + Objects.hashCode(getStatus());
        hash = 31 * hash + Objects.hashCode(getLimitPrice());
        hash = 31 * hash + Objects.hashCode(getInstrumentSymbol());
        hash = 31 * hash + Objects.hashCode(getInstrumentSector());
        hash = 31 * hash + Objects.hashCode(getInstrumentIndustry());
        hash = 31 * hash + Objects.hashCode(getTraderName());
        hash = 31 * hash + Objects.hashCode(getTraderGroup());
        hash = 31 * hash + Objects.hashCode(getTraderGroupType());
        hash = 31 * hash + Float.hashCode(getPrice());
        hash = 31 * hash + Short.hashCode(getDateExecuted());
        hash = 31 * hash + Objects.hashCode(getInstrumentName());
        return hash;
    }
}