package com.extspeeder.example.financialdemo.db.position.generated;

import com.extspeeder.example.financialdemo.db.position.RawPosition;
import com.extspeeder.example.financialdemo.db.position.RawPositionImpl;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;
import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.extspeeder.example.financialdemo.db.position.RawPosition} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedRawPositionSqlAdapter {
    
    private final TableIdentifier<RawPosition> tableIdentifier;
    private SqlTypeMapperHelper<Double, Float> pnlHelper;
    private SqlTypeMapperHelper<Double, Float> initiateTradingMktValHelper;
    private SqlTypeMapperHelper<Double, Float> liquidateTradingMktValHelper;
    
    protected GeneratedRawPositionSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "piq", "daily_position_performance");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent, @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected RawPosition apply(ResultSet resultSet) throws SpeedmentException {
        final RawPosition entity = createEntity();
        try {
            entity.setId(                     resultSet.getLong(1)                                       );
            entity.setPnl(                    pnlHelper.apply(resultSet.getDouble(2))                    );
            entity.setInitiateTradingMktVal(  initiateTradingMktValHelper.apply(resultSet.getDouble(3))  );
            entity.setLiquidateTradingMktVal( liquidateTradingMktValHelper.apply(resultSet.getDouble(4)) );
            entity.setValueDate(              resultSet.getInt(5)                                        );
            entity.setTraderName(             resultSet.getString(6)                                     );
            entity.setTraderGroup(            resultSet.getString(7)                                     );
            entity.setTraderGroupType(        resultSet.getString(8)                                     );
            entity.setInstrumentName(         resultSet.getString(9)                                     );
            entity.setInstrumentSymbol(       resultSet.getString(10)                                    );
            entity.setInstrumentSector(       resultSet.getString(11)                                    );
            entity.setInstrumentIndustry(     resultSet.getString(12)                                    );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected RawPositionImpl createEntity() {
        return new RawPositionImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        pnlHelper = SqlTypeMapperHelper.create(project, RawPosition.PNL, RawPosition.class);
        initiateTradingMktValHelper = SqlTypeMapperHelper.create(project, RawPosition.INITIATE_TRADING_MKT_VAL, RawPosition.class);
        liquidateTradingMktValHelper = SqlTypeMapperHelper.create(project, RawPosition.LIQUIDATE_TRADING_MKT_VAL, RawPosition.class);
    }
}