package com.extspeeder.example.financialdemo.db.prices.generated;

import com.extspeeder.example.financialdemo.db.prices.PriceStore;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.FloatField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.doubles.DoubleToFloatMapper;
import com.speedment.runtime.typemapper.doubles.PrimitiveDoubleToFloatMapper;
import com.speedment.runtime.typemapper.longs.PrimitiveLongToIntegerMapper;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.extspeeder.example.financialdemo.db.prices.PriceStore}-interface
 * representing entities of the {@code price_store}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedPriceStore {
    
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getId()} method.
     */
    final LongField<PriceStore, Long> ID = LongField.create(
        Identifier.ID,
        PriceStore::getId,
        PriceStore::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getValueDate()} method.
     */
    final IntField<PriceStore, Long> VALUE_DATE = IntField.create(
        Identifier.VALUE_DATE,
        PriceStore::getValueDate,
        PriceStore::setValueDate,
        new PrimitiveLongToIntegerMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getOpen()} method.
     */
    final FloatField<PriceStore, Double> OPEN = FloatField.create(
        Identifier.OPEN,
        PriceStore::getOpen,
        PriceStore::setOpen,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getHigh()} method.
     */
    final FloatField<PriceStore, Double> HIGH = FloatField.create(
        Identifier.HIGH,
        PriceStore::getHigh,
        PriceStore::setHigh,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getLow()} method.
     */
    final FloatField<PriceStore, Double> LOW = FloatField.create(
        Identifier.LOW,
        PriceStore::getLow,
        PriceStore::setLow,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getClose()} method.
     */
    final ComparableField<PriceStore, Double, Float> CLOSE = ComparableField.create(
        Identifier.CLOSE,
        PriceStore::getClose,
        PriceStore::setClose,
        new DoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link PriceStore} field that can be
     * obtained using the {@link PriceStore#getInstrumentSymbol()} method.
     */
    final StringField<PriceStore, String> INSTRUMENT_SYMBOL = StringField.create(
        Identifier.INSTRUMENT_SYMBOL,
        PriceStore::getInstrumentSymbol,
        PriceStore::setInstrumentSymbol,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this PriceStore. The id field corresponds to the
     * database column db0.piq2.price_store.id.
     * 
     * @return the id of this PriceStore
     */
    long getId();
    
    /**
     * Returns the valueDate of this PriceStore. The valueDate field corresponds
     * to the database column db0.piq2.price_store.value_date.
     * 
     * @return the valueDate of this PriceStore
     */
    int getValueDate();
    
    /**
     * Returns the open of this PriceStore. The open field corresponds to the
     * database column db0.piq2.price_store.open.
     * 
     * @return the open of this PriceStore
     */
    float getOpen();
    
    /**
     * Returns the high of this PriceStore. The high field corresponds to the
     * database column db0.piq2.price_store.high.
     * 
     * @return the high of this PriceStore
     */
    float getHigh();
    
    /**
     * Returns the low of this PriceStore. The low field corresponds to the
     * database column db0.piq2.price_store.low.
     * 
     * @return the low of this PriceStore
     */
    float getLow();
    
    /**
     * Returns the close of this PriceStore. The close field corresponds to the
     * database column db0.piq2.price_store.close.
     * 
     * @return the close of this PriceStore
     */
    Float getClose();
    
    /**
     * Returns the instrumentSymbol of this PriceStore. The instrumentSymbol
     * field corresponds to the database column
     * db0.piq2.price_store.instrument_symbol.
     * 
     * @return the instrumentSymbol of this PriceStore
     */
    String getInstrumentSymbol();
    
    /**
     * Sets the id of this PriceStore. The id field corresponds to the database
     * column db0.piq2.price_store.id.
     * 
     * @param id to set of this PriceStore
     * @return   this PriceStore instance
     */
    PriceStore setId(long id);
    
    /**
     * Sets the valueDate of this PriceStore. The valueDate field corresponds to
     * the database column db0.piq2.price_store.value_date.
     * 
     * @param valueDate to set of this PriceStore
     * @return          this PriceStore instance
     */
    PriceStore setValueDate(int valueDate);
    
    /**
     * Sets the open of this PriceStore. The open field corresponds to the
     * database column db0.piq2.price_store.open.
     * 
     * @param open to set of this PriceStore
     * @return     this PriceStore instance
     */
    PriceStore setOpen(float open);
    
    /**
     * Sets the high of this PriceStore. The high field corresponds to the
     * database column db0.piq2.price_store.high.
     * 
     * @param high to set of this PriceStore
     * @return     this PriceStore instance
     */
    PriceStore setHigh(float high);
    
    /**
     * Sets the low of this PriceStore. The low field corresponds to the
     * database column db0.piq2.price_store.low.
     * 
     * @param low to set of this PriceStore
     * @return    this PriceStore instance
     */
    PriceStore setLow(float low);
    
    /**
     * Sets the close of this PriceStore. The close field corresponds to the
     * database column db0.piq2.price_store.close.
     * 
     * @param close to set of this PriceStore
     * @return      this PriceStore instance
     */
    PriceStore setClose(Float close);
    
    /**
     * Sets the instrumentSymbol of this PriceStore. The instrumentSymbol field
     * corresponds to the database column
     * db0.piq2.price_store.instrument_symbol.
     * 
     * @param instrumentSymbol to set of this PriceStore
     * @return                 this PriceStore instance
     */
    PriceStore setInstrumentSymbol(String instrumentSymbol);
    
    enum Identifier implements ColumnIdentifier<PriceStore> {
        
        ID                ("id"),
        VALUE_DATE        ("value_date"),
        OPEN              ("open"),
        HIGH              ("high"),
        LOW               ("low"),
        CLOSE             ("close"),
        INSTRUMENT_SYMBOL ("instrument_symbol");
        
        private final String columnName;
        private final TableIdentifier<PriceStore> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db0";
        }
        
        @Override
        public String getSchemaName() {
            return "piq2";
        }
        
        @Override
        public String getTableName() {
            return "price_store";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<PriceStore> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}