package com.extspeeder.example.financialdemo.db.order.generated;

import com.extspeeder.example.financialdemo.db.order.Order;
import com.extspeeder.example.financialdemo.db.order.OrderImpl;
import com.extspeeder.example.financialdemo.extra.BuySell;
import com.extspeeder.example.financialdemo.extra.CohortType;
import com.extspeeder.example.financialdemo.extra.OrderType;
import com.extspeeder.example.financialdemo.extra.Status;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.extspeeder.example.financialdemo.db.order.Order} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedOrderSqlAdapter {
    
    private final TableIdentifier<Order> tableIdentifier;
    private SqlTypeMapperHelper<Integer, Short> dateCreatedHelper;
    private SqlTypeMapperHelper<String, BuySell> directionHelper;
    private SqlTypeMapperHelper<String, OrderType> orderTypeHelper;
    private SqlTypeMapperHelper<String, Status> statusHelper;
    private SqlTypeMapperHelper<Double, Float> limitPriceHelper;
    private SqlTypeMapperHelper<String, CohortType> traderGroupTypeHelper;
    private SqlTypeMapperHelper<Double, Float> priceHelper;
    private SqlTypeMapperHelper<Integer, Short> dateExecutedHelper;
    
    protected GeneratedOrderSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "piq", "orders");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent, @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected Order apply(ResultSet resultSet) throws SpeedmentException {
        final Order entity = createEntity();
        try {
            entity.setId(                 resultSet.getLong(1)                                 );
            entity.setDateCreated(        dateCreatedHelper.apply(resultSet.getInt(2))         );
            entity.setDirection(          directionHelper.apply(resultSet.getString(3))        );
            entity.setOrderType(          orderTypeHelper.apply(resultSet.getString(4))        );
            entity.setQuantity(           resultSet.getInt(5)                                  );
            entity.setStatus(             statusHelper.apply(resultSet.getString(6))           );
            entity.setLimitPrice(         limitPriceHelper.apply(getDouble(resultSet, 7))      );
            entity.setInstrumentSymbol(   resultSet.getString(8)                               );
            entity.setInstrumentSector(   resultSet.getString(9)                               );
            entity.setInstrumentIndustry( resultSet.getString(10)                              );
            entity.setTraderName(         resultSet.getString(11)                              );
            entity.setTraderGroup(        resultSet.getString(12)                              );
            entity.setTraderGroupType(    traderGroupTypeHelper.apply(resultSet.getString(13)) );
            entity.setPrice(              priceHelper.apply(resultSet.getDouble(14))           );
            entity.setDateExecuted(       dateExecutedHelper.apply(resultSet.getInt(15))       );
            entity.setInstrumentName(     resultSet.getString(16)                              );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected OrderImpl createEntity() {
        return new OrderImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        dateCreatedHelper = SqlTypeMapperHelper.create(project, Order.DATE_CREATED, Order.class);
        directionHelper = SqlTypeMapperHelper.create(project, Order.DIRECTION, Order.class);
        orderTypeHelper = SqlTypeMapperHelper.create(project, Order.ORDER_TYPE, Order.class);
        statusHelper = SqlTypeMapperHelper.create(project, Order.STATUS, Order.class);
        limitPriceHelper = SqlTypeMapperHelper.create(project, Order.LIMIT_PRICE, Order.class);
        traderGroupTypeHelper = SqlTypeMapperHelper.create(project, Order.TRADER_GROUP_TYPE, Order.class);
        priceHelper = SqlTypeMapperHelper.create(project, Order.PRICE, Order.class);
        dateExecutedHelper = SqlTypeMapperHelper.create(project, Order.DATE_EXECUTED, Order.class);
    }
}