package com.extspeeder.example.financialdemo.db.position.generated;

import com.extspeeder.example.financialdemo.db.position.RawPosition;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.extspeeder.example.financialdemo.db.position.RawPosition}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedRawPositionImpl implements RawPosition {
    
    private long id;
    private float pnl;
    private float initiateTradingMktVal;
    private float liquidateTradingMktVal;
    private int valueDate;
    private String traderName;
    private String traderGroup;
    private String traderGroupType;
    protected String instrumentName;
    private String instrumentSymbol;
    private String instrumentSector;
    private String instrumentIndustry;
    
    protected GeneratedRawPositionImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public float getPnl() {
        return pnl;
    }
    
    @Override
    public float getInitiateTradingMktVal() {
        return initiateTradingMktVal;
    }
    
    @Override
    public float getLiquidateTradingMktVal() {
        return liquidateTradingMktVal;
    }
    
    @Override
    public int getValueDate() {
        return valueDate;
    }
    
    @Override
    public String getTraderName() {
        return traderName;
    }
    
    @Override
    public String getTraderGroup() {
        return traderGroup;
    }
    
    @Override
    public String getTraderGroupType() {
        return traderGroupType;
    }
    
    @Override
    public Optional<String> getInstrumentName() {
        return Optional.ofNullable(instrumentName);
    }
    
    @Override
    public String getInstrumentSymbol() {
        return instrumentSymbol;
    }
    
    @Override
    public Optional<String> getInstrumentSector() {
        return Optional.ofNullable(instrumentSector);
    }
    
    @Override
    public Optional<String> getInstrumentIndustry() {
        return Optional.ofNullable(instrumentIndustry);
    }
    
    @Override
    public RawPosition setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public RawPosition setPnl(float pnl) {
        this.pnl = pnl;
        return this;
    }
    
    @Override
    public RawPosition setInitiateTradingMktVal(float initiateTradingMktVal) {
        this.initiateTradingMktVal = initiateTradingMktVal;
        return this;
    }
    
    @Override
    public RawPosition setLiquidateTradingMktVal(float liquidateTradingMktVal) {
        this.liquidateTradingMktVal = liquidateTradingMktVal;
        return this;
    }
    
    @Override
    public RawPosition setValueDate(int valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    @Override
    public RawPosition setTraderName(String traderName) {
        this.traderName = traderName;
        return this;
    }
    
    @Override
    public RawPosition setTraderGroup(String traderGroup) {
        this.traderGroup = traderGroup;
        return this;
    }
    
    @Override
    public RawPosition setTraderGroupType(String traderGroupType) {
        this.traderGroupType = traderGroupType;
        return this;
    }
    
    @Override
    public RawPosition setInstrumentName(String instrumentName) {
        this.instrumentName = instrumentName;
        return this;
    }
    
    @Override
    public RawPosition setInstrumentSymbol(String instrumentSymbol) {
        this.instrumentSymbol = instrumentSymbol;
        return this;
    }
    
    @Override
    public RawPosition setInstrumentSector(String instrumentSector) {
        this.instrumentSector = instrumentSector;
        return this;
    }
    
    @Override
    public RawPosition setInstrumentIndustry(String instrumentIndustry) {
        this.instrumentIndustry = instrumentIndustry;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "                     + Objects.toString(getId()));
        sj.add("pnl = "                    + Objects.toString(getPnl()));
        sj.add("initiateTradingMktVal = "  + Objects.toString(getInitiateTradingMktVal()));
        sj.add("liquidateTradingMktVal = " + Objects.toString(getLiquidateTradingMktVal()));
        sj.add("valueDate = "              + Objects.toString(getValueDate()));
        sj.add("traderName = "             + Objects.toString(getTraderName()));
        sj.add("traderGroup = "            + Objects.toString(getTraderGroup()));
        sj.add("traderGroupType = "        + Objects.toString(getTraderGroupType()));
        sj.add("instrumentName = "         + Objects.toString(OptionalUtil.unwrap(getInstrumentName())));
        sj.add("instrumentSymbol = "       + Objects.toString(getInstrumentSymbol()));
        sj.add("instrumentSector = "       + Objects.toString(OptionalUtil.unwrap(getInstrumentSector())));
        sj.add("instrumentIndustry = "     + Objects.toString(OptionalUtil.unwrap(getInstrumentIndustry())));
        return "RawPositionImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof RawPosition)) { return false; }
        final RawPosition thatRawPosition = (RawPosition)that;
        if (this.getId() != thatRawPosition.getId()) {return false; }
        if (this.getPnl() != thatRawPosition.getPnl()) {return false; }
        if (this.getInitiateTradingMktVal() != thatRawPosition.getInitiateTradingMktVal()) {return false; }
        if (this.getLiquidateTradingMktVal() != thatRawPosition.getLiquidateTradingMktVal()) {return false; }
        if (this.getValueDate() != thatRawPosition.getValueDate()) {return false; }
        if (!Objects.equals(this.getTraderName(), thatRawPosition.getTraderName())) {return false; }
        if (!Objects.equals(this.getTraderGroup(), thatRawPosition.getTraderGroup())) {return false; }
        if (!Objects.equals(this.getTraderGroupType(), thatRawPosition.getTraderGroupType())) {return false; }
        if (!Objects.equals(this.getInstrumentName(), thatRawPosition.getInstrumentName())) {return false; }
        if (!Objects.equals(this.getInstrumentSymbol(), thatRawPosition.getInstrumentSymbol())) {return false; }
        if (!Objects.equals(this.getInstrumentSector(), thatRawPosition.getInstrumentSector())) {return false; }
        if (!Objects.equals(this.getInstrumentIndustry(), thatRawPosition.getInstrumentIndustry())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Float.hashCode(getPnl());
        hash = 31 * hash + Float.hashCode(getInitiateTradingMktVal());
        hash = 31 * hash + Float.hashCode(getLiquidateTradingMktVal());
        hash = 31 * hash + Integer.hashCode(getValueDate());
        hash = 31 * hash + Objects.hashCode(getTraderName());
        hash = 31 * hash + Objects.hashCode(getTraderGroup());
        hash = 31 * hash + Objects.hashCode(getTraderGroupType());
        hash = 31 * hash + Objects.hashCode(getInstrumentName());
        hash = 31 * hash + Objects.hashCode(getInstrumentSymbol());
        hash = 31 * hash + Objects.hashCode(getInstrumentSector());
        hash = 31 * hash + Objects.hashCode(getInstrumentIndustry());
        return hash;
    }
}