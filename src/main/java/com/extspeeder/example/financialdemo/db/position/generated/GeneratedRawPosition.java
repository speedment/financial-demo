package com.extspeeder.example.financialdemo.db.position.generated;

import com.extspeeder.example.financialdemo.db.position.RawPosition;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.FloatField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.doubles.PrimitiveDoubleToFloatMapper;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.extspeeder.example.financialdemo.db.position.RawPosition}-interface
 * representing entities of the {@code daily_position_performance}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedRawPosition {
    
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getId()} method.
     */
    final LongField<RawPosition, Long> ID = LongField.create(
        Identifier.ID,
        RawPosition::getId,
        RawPosition::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getPnl()} method.
     */
    final FloatField<RawPosition, Double> PNL = FloatField.create(
        Identifier.PNL,
        RawPosition::getPnl,
        RawPosition::setPnl,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getInitiateTradingMktVal()} method.
     */
    final FloatField<RawPosition, Double> INITIATE_TRADING_MKT_VAL = FloatField.create(
        Identifier.INITIATE_TRADING_MKT_VAL,
        RawPosition::getInitiateTradingMktVal,
        RawPosition::setInitiateTradingMktVal,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getLiquidateTradingMktVal()}
     * method.
     */
    final FloatField<RawPosition, Double> LIQUIDATE_TRADING_MKT_VAL = FloatField.create(
        Identifier.LIQUIDATE_TRADING_MKT_VAL,
        RawPosition::getLiquidateTradingMktVal,
        RawPosition::setLiquidateTradingMktVal,
        new PrimitiveDoubleToFloatMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getValueDate()} method.
     */
    final IntField<RawPosition, Integer> VALUE_DATE = IntField.create(
        Identifier.VALUE_DATE,
        RawPosition::getValueDate,
        RawPosition::setValueDate,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getTraderName()} method.
     */
    final StringField<RawPosition, String> TRADER_NAME = StringField.create(
        Identifier.TRADER_NAME,
        RawPosition::getTraderName,
        RawPosition::setTraderName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getTraderGroup()} method.
     */
    final StringField<RawPosition, String> TRADER_GROUP = StringField.create(
        Identifier.TRADER_GROUP,
        RawPosition::getTraderGroup,
        RawPosition::setTraderGroup,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getTraderGroupType()} method.
     */
    final StringField<RawPosition, String> TRADER_GROUP_TYPE = StringField.create(
        Identifier.TRADER_GROUP_TYPE,
        RawPosition::getTraderGroupType,
        RawPosition::setTraderGroupType,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getInstrumentName()} method.
     */
    final StringField<RawPosition, String> INSTRUMENT_NAME = StringField.create(
        Identifier.INSTRUMENT_NAME,
        o -> OptionalUtil.unwrap(o.getInstrumentName()),
        RawPosition::setInstrumentName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getInstrumentSymbol()} method.
     */
    final StringField<RawPosition, String> INSTRUMENT_SYMBOL = StringField.create(
        Identifier.INSTRUMENT_SYMBOL,
        RawPosition::getInstrumentSymbol,
        RawPosition::setInstrumentSymbol,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getInstrumentSector()} method.
     */
    final StringField<RawPosition, String> INSTRUMENT_SECTOR = StringField.create(
        Identifier.INSTRUMENT_SECTOR,
        o -> OptionalUtil.unwrap(o.getInstrumentSector()),
        RawPosition::setInstrumentSector,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link RawPosition} field that can be
     * obtained using the {@link RawPosition#getInstrumentIndustry()} method.
     */
    final StringField<RawPosition, String> INSTRUMENT_INDUSTRY = StringField.create(
        Identifier.INSTRUMENT_INDUSTRY,
        o -> OptionalUtil.unwrap(o.getInstrumentIndustry()),
        RawPosition::setInstrumentIndustry,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this RawPosition. The id field corresponds to the
     * database column db0.piq2.daily_position_performance.id.
     * 
     * @return the id of this RawPosition
     */
    long getId();
    
    /**
     * Returns the pnl of this RawPosition. The pnl field corresponds to the
     * database column db0.piq2.daily_position_performance.pnl.
     * 
     * @return the pnl of this RawPosition
     */
    float getPnl();
    
    /**
     * Returns the initiateTradingMktVal of this RawPosition. The
     * initiateTradingMktVal field corresponds to the database column
     * db0.piq2.daily_position_performance.total_initiate_mkt_val.
     * 
     * @return the initiateTradingMktVal of this RawPosition
     */
    float getInitiateTradingMktVal();
    
    /**
     * Returns the liquidateTradingMktVal of this RawPosition. The
     * liquidateTradingMktVal field corresponds to the database column
     * db0.piq2.daily_position_performance.total_liquidate_mkt_val.
     * 
     * @return the liquidateTradingMktVal of this RawPosition
     */
    float getLiquidateTradingMktVal();
    
    /**
     * Returns the valueDate of this RawPosition. The valueDate field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.value_date_int.
     * 
     * @return the valueDate of this RawPosition
     */
    int getValueDate();
    
    /**
     * Returns the traderName of this RawPosition. The traderName field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.trader_name.
     * 
     * @return the traderName of this RawPosition
     */
    String getTraderName();
    
    /**
     * Returns the traderGroup of this RawPosition. The traderGroup field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.trader_group.
     * 
     * @return the traderGroup of this RawPosition
     */
    String getTraderGroup();
    
    /**
     * Returns the traderGroupType of this RawPosition. The traderGroupType
     * field corresponds to the database column
     * db0.piq2.daily_position_performance.trader_group_type.
     * 
     * @return the traderGroupType of this RawPosition
     */
    String getTraderGroupType();
    
    /**
     * Returns the instrumentName of this RawPosition. The instrumentName field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_name.
     * 
     * @return the instrumentName of this RawPosition
     */
    Optional<String> getInstrumentName();
    
    /**
     * Returns the instrumentSymbol of this RawPosition. The instrumentSymbol
     * field corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_symbol.
     * 
     * @return the instrumentSymbol of this RawPosition
     */
    String getInstrumentSymbol();
    
    /**
     * Returns the instrumentSector of this RawPosition. The instrumentSector
     * field corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_sector.
     * 
     * @return the instrumentSector of this RawPosition
     */
    Optional<String> getInstrumentSector();
    
    /**
     * Returns the instrumentIndustry of this RawPosition. The
     * instrumentIndustry field corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_industry.
     * 
     * @return the instrumentIndustry of this RawPosition
     */
    Optional<String> getInstrumentIndustry();
    
    /**
     * Sets the id of this RawPosition. The id field corresponds to the database
     * column db0.piq2.daily_position_performance.id.
     * 
     * @param id to set of this RawPosition
     * @return   this RawPosition instance
     */
    RawPosition setId(long id);
    
    /**
     * Sets the pnl of this RawPosition. The pnl field corresponds to the
     * database column db0.piq2.daily_position_performance.pnl.
     * 
     * @param pnl to set of this RawPosition
     * @return    this RawPosition instance
     */
    RawPosition setPnl(float pnl);
    
    /**
     * Sets the initiateTradingMktVal of this RawPosition. The
     * initiateTradingMktVal field corresponds to the database column
     * db0.piq2.daily_position_performance.total_initiate_mkt_val.
     * 
     * @param initiateTradingMktVal to set of this RawPosition
     * @return                      this RawPosition instance
     */
    RawPosition setInitiateTradingMktVal(float initiateTradingMktVal);
    
    /**
     * Sets the liquidateTradingMktVal of this RawPosition. The
     * liquidateTradingMktVal field corresponds to the database column
     * db0.piq2.daily_position_performance.total_liquidate_mkt_val.
     * 
     * @param liquidateTradingMktVal to set of this RawPosition
     * @return                       this RawPosition instance
     */
    RawPosition setLiquidateTradingMktVal(float liquidateTradingMktVal);
    
    /**
     * Sets the valueDate of this RawPosition. The valueDate field corresponds
     * to the database column
     * db0.piq2.daily_position_performance.value_date_int.
     * 
     * @param valueDate to set of this RawPosition
     * @return          this RawPosition instance
     */
    RawPosition setValueDate(int valueDate);
    
    /**
     * Sets the traderName of this RawPosition. The traderName field corresponds
     * to the database column db0.piq2.daily_position_performance.trader_name.
     * 
     * @param traderName to set of this RawPosition
     * @return           this RawPosition instance
     */
    RawPosition setTraderName(String traderName);
    
    /**
     * Sets the traderGroup of this RawPosition. The traderGroup field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.trader_group.
     * 
     * @param traderGroup to set of this RawPosition
     * @return            this RawPosition instance
     */
    RawPosition setTraderGroup(String traderGroup);
    
    /**
     * Sets the traderGroupType of this RawPosition. The traderGroupType field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.trader_group_type.
     * 
     * @param traderGroupType to set of this RawPosition
     * @return                this RawPosition instance
     */
    RawPosition setTraderGroupType(String traderGroupType);
    
    /**
     * Sets the instrumentName of this RawPosition. The instrumentName field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_name.
     * 
     * @param instrumentName to set of this RawPosition
     * @return               this RawPosition instance
     */
    RawPosition setInstrumentName(String instrumentName);
    
    /**
     * Sets the instrumentSymbol of this RawPosition. The instrumentSymbol field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_symbol.
     * 
     * @param instrumentSymbol to set of this RawPosition
     * @return                 this RawPosition instance
     */
    RawPosition setInstrumentSymbol(String instrumentSymbol);
    
    /**
     * Sets the instrumentSector of this RawPosition. The instrumentSector field
     * corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_sector.
     * 
     * @param instrumentSector to set of this RawPosition
     * @return                 this RawPosition instance
     */
    RawPosition setInstrumentSector(String instrumentSector);
    
    /**
     * Sets the instrumentIndustry of this RawPosition. The instrumentIndustry
     * field corresponds to the database column
     * db0.piq2.daily_position_performance.instrument_industry.
     * 
     * @param instrumentIndustry to set of this RawPosition
     * @return                   this RawPosition instance
     */
    RawPosition setInstrumentIndustry(String instrumentIndustry);
    
    enum Identifier implements ColumnIdentifier<RawPosition> {
        
        ID                        ("id"),
        PNL                       ("pnl"),
        INITIATE_TRADING_MKT_VAL  ("total_initiate_mkt_val"),
        LIQUIDATE_TRADING_MKT_VAL ("total_liquidate_mkt_val"),
        VALUE_DATE                ("value_date_int"),
        TRADER_NAME               ("trader_name"),
        TRADER_GROUP              ("trader_group"),
        TRADER_GROUP_TYPE         ("trader_group_type"),
        INSTRUMENT_NAME           ("instrument_name"),
        INSTRUMENT_SYMBOL         ("instrument_symbol"),
        INSTRUMENT_SECTOR         ("instrument_sector"),
        INSTRUMENT_INDUSTRY       ("instrument_industry");
        
        private final String columnName;
        private final TableIdentifier<RawPosition> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db0";
        }
        
        @Override
        public String getSchemaName() {
            return "piq2";
        }
        
        @Override
        public String getTableName() {
            return "daily_position_performance";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<RawPosition> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}