package com.extspeeder.example.financialdemo.db.position.generated;

import com.extspeeder.example.financialdemo.db.position.RawPosition;
import com.extspeeder.example.financialdemo.db.position.RawPositionEntityStoreSerializerImpl;
import com.extspeeder.example.financialdemo.db.position.RawPositionManager;
import com.speedment.enterprise.fastcache.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.fastcache.runtime.entitystore.EntityStore;
import com.speedment.enterprise.fastcache.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.fastcache.runtime.entitystore.StringSelection.Encoding;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCache.OfFloat;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCache.OfLong;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.fastcache.runtime.fieldcache.FieldCacheBuilder;
import com.speedment.enterprise.fastcache.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.fastcache.runtime.util.FastCacheHolderUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import javax.annotation.Generated;
import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * RawPositionManager}.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class GeneratedRawPositionCacheHolder implements EntityStoreHolder<RawPosition> {
    
    private final static TableIdentifier<RawPosition> TABLE_IDENTIFIER = TableIdentifier.of("db0", "piq", "daily_position_performance");
    private final EntityStore<RawPosition> entityStore;
    private final OfLong<RawPosition> fieldIdCache;
    private final OfFloat<RawPosition> fieldPnlCache;
    private final OfFloat<RawPosition> fieldInitiateTradingMktValCache;
    private final OfFloat<RawPosition> fieldLiquidateTradingMktValCache;
    private final OfInt<RawPosition> fieldValueDateCache;
    private final OfString<RawPosition> fieldTraderNameCache;
    private final OfString<RawPosition> fieldTraderGroupCache;
    private final OfString<RawPosition> fieldTraderGroupTypeCache;
    private final OfString<RawPosition> fieldInstrumentNameCache;
    private final OfString<RawPosition> fieldInstrumentSymbolCache;
    private final OfString<RawPosition> fieldInstrumentSectorCache;
    private final OfString<RawPosition> fieldInstrumentIndustryCache;
    
    public GeneratedRawPositionCacheHolder(
            EntityStore<RawPosition> entityStore,
            OfLong<RawPosition> fieldIdCache,
            OfFloat<RawPosition> fieldPnlCache,
            OfFloat<RawPosition> fieldInitiateTradingMktValCache,
            OfFloat<RawPosition> fieldLiquidateTradingMktValCache,
            OfInt<RawPosition> fieldValueDateCache,
            OfString<RawPosition> fieldTraderNameCache,
            OfString<RawPosition> fieldTraderGroupCache,
            OfString<RawPosition> fieldTraderGroupTypeCache,
            OfString<RawPosition> fieldInstrumentNameCache,
            OfString<RawPosition> fieldInstrumentSymbolCache,
            OfString<RawPosition> fieldInstrumentSectorCache,
            OfString<RawPosition> fieldInstrumentIndustryCache) {
        
        this.entityStore                      = requireNonNull(entityStore);
        this.fieldIdCache                     = requireNonNull(fieldIdCache);
        this.fieldPnlCache                    = requireNonNull(fieldPnlCache);
        this.fieldInitiateTradingMktValCache  = requireNonNull(fieldInitiateTradingMktValCache);
        this.fieldLiquidateTradingMktValCache = requireNonNull(fieldLiquidateTradingMktValCache);
        this.fieldValueDateCache              = requireNonNull(fieldValueDateCache);
        this.fieldTraderNameCache             = requireNonNull(fieldTraderNameCache);
        this.fieldTraderGroupCache            = requireNonNull(fieldTraderGroupCache);
        this.fieldTraderGroupTypeCache        = requireNonNull(fieldTraderGroupTypeCache);
        this.fieldInstrumentNameCache         = requireNonNull(fieldInstrumentNameCache);
        this.fieldInstrumentSymbolCache       = requireNonNull(fieldInstrumentSymbolCache);
        this.fieldInstrumentSectorCache       = requireNonNull(fieldInstrumentSectorCache);
        this.fieldInstrumentIndustryCache     = requireNonNull(fieldInstrumentIndustryCache);
    }
    
    @Override
    public EntityStore<RawPosition> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T> FieldCache<ENTITY, T> getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        if (columnId instanceof RawPosition.Identifier) {
            final RawPosition.Identifier _id = (RawPosition.Identifier) columnId;
            switch (_id) {
                case ID                        : return (FieldCache<ENTITY, T>) fieldIdCache;
                case PNL                       : return (FieldCache<ENTITY, T>) fieldPnlCache;
                case INITIATE_TRADING_MKT_VAL  : return (FieldCache<ENTITY, T>) fieldInitiateTradingMktValCache;
                case LIQUIDATE_TRADING_MKT_VAL : return (FieldCache<ENTITY, T>) fieldLiquidateTradingMktValCache;
                case VALUE_DATE                : return (FieldCache<ENTITY, T>) fieldValueDateCache;
                case TRADER_NAME               : return (FieldCache<ENTITY, T>) fieldTraderNameCache;
                case TRADER_GROUP              : return (FieldCache<ENTITY, T>) fieldTraderGroupCache;
                case TRADER_GROUP_TYPE         : return (FieldCache<ENTITY, T>) fieldTraderGroupTypeCache;
                case INSTRUMENT_NAME           : return (FieldCache<ENTITY, T>) fieldInstrumentNameCache;
                case INSTRUMENT_SYMBOL         : return (FieldCache<ENTITY, T>) fieldInstrumentSymbolCache;
                case INSTRUMENT_SECTOR         : return (FieldCache<ENTITY, T>) fieldInstrumentSectorCache;
                case INSTRUMENT_INDUSTRY       : return (FieldCache<ENTITY, T>) fieldInstrumentIndustryCache;
                default : throw new UnsupportedOperationException(
                    String.format("Unknown enum constant '%s'.", _id)
                );
            }
        } else {
            final String _colName = columnId.getColumnName();
            switch (_colName) {
                case "id"                      : return (FieldCache<ENTITY, T>) fieldIdCache;
                case "pnl"                     : return (FieldCache<ENTITY, T>) fieldPnlCache;
                case "total_initiate_mkt_val"  : return (FieldCache<ENTITY, T>) fieldInitiateTradingMktValCache;
                case "total_liquidate_mkt_val" : return (FieldCache<ENTITY, T>) fieldLiquidateTradingMktValCache;
                case "value_date_int"          : return (FieldCache<ENTITY, T>) fieldValueDateCache;
                case "trader_name"             : return (FieldCache<ENTITY, T>) fieldTraderNameCache;
                case "trader_group"            : return (FieldCache<ENTITY, T>) fieldTraderGroupCache;
                case "trader_group_type"       : return (FieldCache<ENTITY, T>) fieldTraderGroupTypeCache;
                case "instrument_name"         : return (FieldCache<ENTITY, T>) fieldInstrumentNameCache;
                case "instrument_symbol"       : return (FieldCache<ENTITY, T>) fieldInstrumentSymbolCache;
                case "instrument_sector"       : return (FieldCache<ENTITY, T>) fieldInstrumentSectorCache;
                case "instrument_industry"     : return (FieldCache<ENTITY, T>) fieldInstrumentIndustryCache;
                default : throw new UnsupportedOperationException(
                    String.format("Unknown column name '%s'.", _colName)
                );
            }
        }
    }
    
    public static CompletableFuture<GeneratedRawPositionCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        final RawPositionEntityStoreSerializerImpl serializer = 
            new RawPositionEntityStoreSerializerImpl();
        final CompletableFuture<EntityStore<RawPosition>> entityStoreFuture = 
            FastCacheHolderUtil.buildEntityStore(streamSupplier, executor, serializer, TABLE_IDENTIFIER);
        
        final CompletableFuture<FieldCache.OfLong<RawPosition>> fieldIdCacheFuture =
            FastCacheHolderUtil.buildLongCache(entityStoreFuture, RawPosition.ID, FieldCache.UNINDEXED | FieldCache.REFERENCE_ORDER | FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfFloat<RawPosition>> fieldPnlCacheFuture =
            FastCacheHolderUtil.buildFloatCache(entityStoreFuture, RawPosition.PNL, 0);
        
        final CompletableFuture<FieldCache.OfFloat<RawPosition>> fieldInitiateTradingMktValCacheFuture =
            FastCacheHolderUtil.buildFloatCache(entityStoreFuture, RawPosition.INITIATE_TRADING_MKT_VAL, 0);
        
        final CompletableFuture<FieldCache.OfFloat<RawPosition>> fieldLiquidateTradingMktValCacheFuture =
            FastCacheHolderUtil.buildFloatCache(entityStoreFuture, RawPosition.LIQUIDATE_TRADING_MKT_VAL, 0);
        
        final CompletableFuture<FieldCache.OfInt<RawPosition>> fieldValueDateCacheFuture =
            FastCacheHolderUtil.buildIntCache(entityStoreFuture, RawPosition.VALUE_DATE, 0);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldTraderNameCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.TRADER_NAME, 0, Encoding.UTF_8);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldTraderGroupCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.TRADER_GROUP, 0, Encoding.UTF_8);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldTraderGroupTypeCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.TRADER_GROUP_TYPE, 0, Encoding.UTF_8);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldInstrumentNameCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.INSTRUMENT_NAME, 0, Encoding.UTF_8);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldInstrumentSymbolCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.INSTRUMENT_SYMBOL, 0, Encoding.UTF_8);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldInstrumentSectorCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.INSTRUMENT_SECTOR, 0, Encoding.UTF_8);
        
        final CompletableFuture<FieldCache.OfString<RawPosition>> fieldInstrumentIndustryCacheFuture =
            FastCacheHolderUtil.buildStringCache(entityStoreFuture, RawPosition.INSTRUMENT_INDUSTRY, 0, Encoding.UTF_8);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedRawPositionCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldPnlCacheFuture.get(),
                    fieldInitiateTradingMktValCacheFuture.get(),
                    fieldLiquidateTradingMktValCacheFuture.get(),
                    fieldValueDateCacheFuture.get(),
                    fieldTraderNameCacheFuture.get(),
                    fieldTraderGroupCacheFuture.get(),
                    fieldTraderGroupTypeCacheFuture.get(),
                    fieldInstrumentNameCacheFuture.get(),
                    fieldInstrumentSymbolCacheFuture.get(),
                    fieldInstrumentSectorCacheFuture.get(),
                    fieldInstrumentIndustryCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldPnlCache.close();
        fieldInitiateTradingMktValCache.close();
        fieldLiquidateTradingMktValCache.close();
        fieldValueDateCache.close();
        fieldTraderNameCache.close();
        fieldTraderGroupCache.close();
        fieldTraderGroupTypeCache.close();
        fieldInstrumentNameCache.close();
        fieldInstrumentSymbolCache.close();
        fieldInstrumentSectorCache.close();
        fieldInstrumentIndustryCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            TABLE_IDENTIFIER,
            RawPosition.Identifier.ID,
            RawPosition.Identifier.PNL,
            RawPosition.Identifier.INITIATE_TRADING_MKT_VAL,
            RawPosition.Identifier.LIQUIDATE_TRADING_MKT_VAL,
            RawPosition.Identifier.VALUE_DATE,
            RawPosition.Identifier.TRADER_NAME,
            RawPosition.Identifier.TRADER_GROUP,
            RawPosition.Identifier.TRADER_GROUP_TYPE,
            RawPosition.Identifier.INSTRUMENT_NAME,
            RawPosition.Identifier.INSTRUMENT_SYMBOL,
            RawPosition.Identifier.INSTRUMENT_SECTOR,
            RawPosition.Identifier.INSTRUMENT_INDUSTRY
        );
    }
}